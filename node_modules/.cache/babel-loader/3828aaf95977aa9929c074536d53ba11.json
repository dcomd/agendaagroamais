{"ast":null,"code":"/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _useProperty7 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\nvar _react = require(\"react\");\nvar _computeData = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useDataSource/computeData\"));\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\nvar _isControlledValue = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/isControlledValue\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar keepValidGroupBy = function keepValidGroupBy(groupBy, columnsMap) {\n  if (groupBy && groupBy.length) {\n    return groupBy.map(function (colId) {\n      if (!columnsMap) {\n        return undefined;\n      }\n      var col = columnsMap[colId];\n      if (!col) {\n        return undefined;\n      }\n      return col.id || col.name;\n    }).filter(function (x) {\n      return !!x;\n    });\n  }\n  return groupBy;\n};\nvar useGroupBy = function useGroupBy(props, computedProps, computedPropsRef) {\n  var _useProperty = (0, _useProperty7.default)(props, 'groupBy'),\n    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n    computedGroupBy = _useProperty2[0],\n    initialSetGroupBy = _useProperty2[1];\n  var _useState = (0, _react.useState)({\n      computedIndexesInGroups: {},\n      computedGroupArray: [],\n      computedGroupKeys: {}\n    }),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    computedGroupRelatedInfo = _useState2[0],\n    setComputedGroupRelatedInfo = _useState2[1];\n  var _useProperty3 = (0, _useProperty7.default)(props, 'collapsedGroups', undefined, {\n      onChange: function onChange() {}\n    }),\n    _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n    computedCollapsedGroups = _useProperty4[0],\n    setCollapsedGroups = _useProperty4[1];\n  var defaultExpandedGorups = computedProps && computedProps.defaultCollapsedGroups === true ? {} : true;\n  var _useProperty5 = (0, _useProperty7.default)(props, 'expandedGroups', defaultExpandedGorups, {\n      onChange: function onChange() {}\n    }),\n    _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2),\n    computedExpandedGroups = _useProperty6[0],\n    setExpandedGroups = _useProperty6[1];\n  var setCollapsedAndExpanded = (0, _react.useCallback)(function (_ref) {\n    var collapsedGroups = _ref.collapsedGroups,\n      expandedGroups = _ref.expandedGroups;\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var queue = (0, _batchUpdate.default)();\n    queue.commit(function () {\n      setCollapsedGroups(collapsedGroups);\n      setExpandedGroups(expandedGroups);\n    });\n    if (computedProps.onGroupCollapseChange) {\n      computedProps.onGroupCollapseChange(collapsedGroups, expandedGroups);\n    }\n  }, []);\n  var setGroupBy = function setGroupBy(groupBy) {\n    if (groupBy && typeof groupBy === 'string') {\n      groupBy = [groupBy];\n    }\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    groupBy = keepValidGroupBy(groupBy, computedProps.columnsMap);\n    if ((0, _isControlledValue.default)(props.groupBy)) {\n      initialSetGroupBy(groupBy);\n      return;\n    }\n    var queue = (0, _batchUpdate.default)();\n    var data = (0, _computeData.default)({\n      groupBy: groupBy\n    }, computedProps, queue);\n    queue.commit(function () {\n      if (data !== undefined) {\n        computedProps.silentSetData(data);\n      }\n      initialSetGroupBy(groupBy);\n    });\n  };\n  var isGroupCollapsed = function isGroupCollapsed(group) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return false;\n    }\n    var sep = computedProps.groupPathSeparator;\n    var path = \"\".concat((group.keyPath || group.valuePath).join(sep));\n    var collapsedGroups = computedProps.computedCollapsedGroups;\n    if (collapsedGroups === true) {\n      if (computedProps.computedExpandedGroups) {\n        return !computedProps.computedExpandedGroups[path];\n      }\n      return true;\n    }\n    return !!collapsedGroups[path];\n  };\n  var expandGroup = function expandGroup(group) {\n    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;\n    if (isGroupCollapsed({\n      keyPath: path\n    })) {\n      onGroupToggle(path);\n    }\n  };\n  var collapseGroup = function collapseGroup(group) {\n    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;\n    if (!isGroupCollapsed({\n      keyPath: path\n    })) {\n      onGroupToggle(path);\n    }\n  };\n  var onGroupToggle = function onGroupToggle(path) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var sep = computedProps.groupPathSeparator,\n      computedCollapsedGroups = computedProps.computedCollapsedGroups;\n    var stringPath = path.join(sep);\n    var newCollapsedGroups = computedCollapsedGroups === true ? true : Object.assign({}, computedCollapsedGroups);\n    var newExpandedGroups = computedExpandedGroups === true ? true : Object.assign({}, computedExpandedGroups);\n    if (newExpandedGroups === true) {\n      if (newCollapsedGroups !== true) {\n        if (newCollapsedGroups[stringPath]) {\n          delete newCollapsedGroups[stringPath];\n        } else {\n          newCollapsedGroups[stringPath] = true;\n        }\n      }\n    } else {\n      if (newCollapsedGroups === true) {\n        if (newExpandedGroups[stringPath]) {\n          delete newExpandedGroups[stringPath];\n        } else {\n          newExpandedGroups[stringPath] = true;\n        }\n      } else {\n        if (newCollapsedGroups[stringPath]) {\n          delete newCollapsedGroups[stringPath];\n        } else {\n          newCollapsedGroups[stringPath] = true;\n        }\n      }\n    }\n    setCollapsedAndExpanded({\n      collapsedGroups: newCollapsedGroups,\n      expandedGroups: newExpandedGroups\n    });\n  };\n  var toggleGroup = function toggleGroup(group) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (group && group.keyPath) {\n      if (computedProps.computedPivot && computedProps.computedGroupBy && group.depth === computedProps.computedGroupBy.length) {\n        return;\n      }\n      onGroupToggle(group.keyPath);\n    }\n  };\n  var addGroupByColumn = function addGroupByColumn(column) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var computedColumn = computedProps.getColumnBy(column);\n    if (!computedColumn) {\n      return;\n    }\n    var groupBy = computedProps.computedGroupBy;\n    if (!Array.isArray(groupBy)) {\n      groupBy = [];\n    }\n    if (computedColumn.name && groupBy.indexOf(computedColumn.name) == -1) {\n      setGroupBy([].concat((0, _toConsumableArray2.default)(groupBy), [computedColumn.name]));\n    }\n  };\n  var removeGroupByColumn = function removeGroupByColumn(column) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var computedColumn = computedProps.getColumnBy(column);\n    var groupBy = computedProps.computedGroupBy;\n    if (!Array.isArray(groupBy)) {\n      return;\n    }\n    if (groupBy.indexOf(computedColumn.id) != -1) {\n      setGroupBy(groupBy.filter(function (g) {\n        return g != computedColumn.id;\n      }));\n    }\n  };\n  var collapseAllGroups = function collapseAllGroups() {\n    setCollapsedAndExpanded({\n      collapsedGroups: true,\n      expandedGroups: {}\n    });\n  };\n  var expandAllGroups = function expandAllGroups() {\n    setCollapsedAndExpanded({\n      expandedGroups: true,\n      collapsedGroups: {}\n    });\n  };\n  return _objectSpread({\n    computedGroupBy: computedGroupBy,\n    onGroupToggle: onGroupToggle,\n    toggleGroup: toggleGroup,\n    setGroupBy: setGroupBy,\n    removeGroupByColumn: removeGroupByColumn,\n    addGroupByColumn: addGroupByColumn,\n    isGroupCollapsed: isGroupCollapsed,\n    expandGroup: expandGroup,\n    collapseGroup: collapseGroup,\n    computedCollapsedGroups: computedCollapsedGroups,\n    computedExpandedGroups: computedExpandedGroups,\n    onGroupByChange: setGroupBy,\n    setComputedGroupRelatedInfo: setComputedGroupRelatedInfo,\n    collapseAllGroups: collapseAllGroups,\n    expandAllGroups: expandAllGroups\n  }, computedGroupRelatedInfo);\n};\nvar _default = useGroupBy;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_toConsumableArray2","_slicedToArray2","_useProperty7","_react","_computeData","_batchUpdate","_isControlledValue","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","keepValidGroupBy","groupBy","columnsMap","map","colId","undefined","col","id","name","x","useGroupBy","props","computedProps","computedPropsRef","_useProperty","_useProperty2","computedGroupBy","initialSetGroupBy","_useState","useState","computedIndexesInGroups","computedGroupArray","computedGroupKeys","_useState2","computedGroupRelatedInfo","setComputedGroupRelatedInfo","_useProperty3","onChange","_useProperty4","computedCollapsedGroups","setCollapsedGroups","defaultExpandedGorups","defaultCollapsedGroups","_useProperty5","_useProperty6","computedExpandedGroups","setExpandedGroups","setCollapsedAndExpanded","useCallback","_ref","collapsedGroups","expandedGroups","current","queue","commit","onGroupCollapseChange","setGroupBy","data","silentSetData","isGroupCollapsed","group","sep","groupPathSeparator","path","concat","keyPath","valuePath","join","expandGroup","Array","isArray","onGroupToggle","collapseGroup","stringPath","newCollapsedGroups","assign","newExpandedGroups","toggleGroup","computedPivot","depth","addGroupByColumn","column","computedColumn","getColumnBy","indexOf","removeGroupByColumn","g","collapseAllGroups","expandAllGroups","onGroupByChange","_default"],"sources":["/Users/alexandre.nepomuceno/Documents/agendaagroamais/node_modules/@inovua/reactdatagrid-enterprise/plugins/group-and-pivot/useGroupBy.js"],"sourcesContent":["/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _useProperty7 = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useProperty\"));\nvar _react = require(\"react\");\nvar _computeData = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/hooks/useDataSource/computeData\"));\nvar _batchUpdate = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/batchUpdate\"));\nvar _isControlledValue = _interopRequireDefault(require(\"@inovua/reactdatagrid-community/utils/isControlledValue\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar keepValidGroupBy = function keepValidGroupBy(groupBy, columnsMap) {\n  if (groupBy && groupBy.length) {\n    return groupBy.map(function (colId) {\n      if (!columnsMap) {\n        return undefined;\n      }\n      var col = columnsMap[colId];\n      if (!col) {\n        return undefined;\n      }\n      return col.id || col.name;\n    }).filter(function (x) {\n      return !!x;\n    });\n  }\n  return groupBy;\n};\nvar useGroupBy = function useGroupBy(props, computedProps, computedPropsRef) {\n  var _useProperty = (0, _useProperty7.default)(props, 'groupBy'),\n    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n    computedGroupBy = _useProperty2[0],\n    initialSetGroupBy = _useProperty2[1];\n  var _useState = (0, _react.useState)({\n      computedIndexesInGroups: {},\n      computedGroupArray: [],\n      computedGroupKeys: {}\n    }),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    computedGroupRelatedInfo = _useState2[0],\n    setComputedGroupRelatedInfo = _useState2[1];\n  var _useProperty3 = (0, _useProperty7.default)(props, 'collapsedGroups', undefined, {\n      onChange: function onChange() {}\n    }),\n    _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n    computedCollapsedGroups = _useProperty4[0],\n    setCollapsedGroups = _useProperty4[1];\n  var defaultExpandedGorups = computedProps && computedProps.defaultCollapsedGroups === true ? {} : true;\n  var _useProperty5 = (0, _useProperty7.default)(props, 'expandedGroups', defaultExpandedGorups, {\n      onChange: function onChange() {}\n    }),\n    _useProperty6 = (0, _slicedToArray2.default)(_useProperty5, 2),\n    computedExpandedGroups = _useProperty6[0],\n    setExpandedGroups = _useProperty6[1];\n  var setCollapsedAndExpanded = (0, _react.useCallback)(function (_ref) {\n    var collapsedGroups = _ref.collapsedGroups,\n      expandedGroups = _ref.expandedGroups;\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var queue = (0, _batchUpdate.default)();\n    queue.commit(function () {\n      setCollapsedGroups(collapsedGroups);\n      setExpandedGroups(expandedGroups);\n    });\n    if (computedProps.onGroupCollapseChange) {\n      computedProps.onGroupCollapseChange(collapsedGroups, expandedGroups);\n    }\n  }, []);\n  var setGroupBy = function setGroupBy(groupBy) {\n    if (groupBy && typeof groupBy === 'string') {\n      groupBy = [groupBy];\n    }\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    groupBy = keepValidGroupBy(groupBy, computedProps.columnsMap);\n    if ((0, _isControlledValue.default)(props.groupBy)) {\n      initialSetGroupBy(groupBy);\n      return;\n    }\n    var queue = (0, _batchUpdate.default)();\n    var data = (0, _computeData.default)({\n      groupBy: groupBy\n    }, computedProps, queue);\n    queue.commit(function () {\n      if (data !== undefined) {\n        computedProps.silentSetData(data);\n      }\n      initialSetGroupBy(groupBy);\n    });\n  };\n  var isGroupCollapsed = function isGroupCollapsed(group) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return false;\n    }\n    var sep = computedProps.groupPathSeparator;\n    var path = \"\".concat((group.keyPath || group.valuePath).join(sep));\n    var collapsedGroups = computedProps.computedCollapsedGroups;\n    if (collapsedGroups === true) {\n      if (computedProps.computedExpandedGroups) {\n        return !computedProps.computedExpandedGroups[path];\n      }\n      return true;\n    }\n    return !!collapsedGroups[path];\n  };\n  var expandGroup = function expandGroup(group) {\n    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;\n    if (isGroupCollapsed({\n      keyPath: path\n    })) {\n      onGroupToggle(path);\n    }\n  };\n  var collapseGroup = function collapseGroup(group) {\n    var path = Array.isArray(group) ? group : typeof group == 'string' ? [group] : group.keyPath;\n    if (!isGroupCollapsed({\n      keyPath: path\n    })) {\n      onGroupToggle(path);\n    }\n  };\n  var onGroupToggle = function onGroupToggle(path) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var sep = computedProps.groupPathSeparator,\n      computedCollapsedGroups = computedProps.computedCollapsedGroups;\n    var stringPath = path.join(sep);\n    var newCollapsedGroups = computedCollapsedGroups === true ? true : Object.assign({}, computedCollapsedGroups);\n    var newExpandedGroups = computedExpandedGroups === true ? true : Object.assign({}, computedExpandedGroups);\n    if (newExpandedGroups === true) {\n      if (newCollapsedGroups !== true) {\n        if (newCollapsedGroups[stringPath]) {\n          delete newCollapsedGroups[stringPath];\n        } else {\n          newCollapsedGroups[stringPath] = true;\n        }\n      }\n    } else {\n      if (newCollapsedGroups === true) {\n        if (newExpandedGroups[stringPath]) {\n          delete newExpandedGroups[stringPath];\n        } else {\n          newExpandedGroups[stringPath] = true;\n        }\n      } else {\n        if (newCollapsedGroups[stringPath]) {\n          delete newCollapsedGroups[stringPath];\n        } else {\n          newCollapsedGroups[stringPath] = true;\n        }\n      }\n    }\n    setCollapsedAndExpanded({\n      collapsedGroups: newCollapsedGroups,\n      expandedGroups: newExpandedGroups\n    });\n  };\n  var toggleGroup = function toggleGroup(group) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (group && group.keyPath) {\n      if (computedProps.computedPivot && computedProps.computedGroupBy && group.depth === computedProps.computedGroupBy.length) {\n        return;\n      }\n      onGroupToggle(group.keyPath);\n    }\n  };\n  var addGroupByColumn = function addGroupByColumn(column) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var computedColumn = computedProps.getColumnBy(column);\n    if (!computedColumn) {\n      return;\n    }\n    var groupBy = computedProps.computedGroupBy;\n    if (!Array.isArray(groupBy)) {\n      groupBy = [];\n    }\n    if (computedColumn.name && groupBy.indexOf(computedColumn.name) == -1) {\n      setGroupBy([].concat((0, _toConsumableArray2.default)(groupBy), [computedColumn.name]));\n    }\n  };\n  var removeGroupByColumn = function removeGroupByColumn(column) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var computedColumn = computedProps.getColumnBy(column);\n    var groupBy = computedProps.computedGroupBy;\n    if (!Array.isArray(groupBy)) {\n      return;\n    }\n    if (groupBy.indexOf(computedColumn.id) != -1) {\n      setGroupBy(groupBy.filter(function (g) {\n        return g != computedColumn.id;\n      }));\n    }\n  };\n  var collapseAllGroups = function collapseAllGroups() {\n    setCollapsedAndExpanded({\n      collapsedGroups: true,\n      expandedGroups: {}\n    });\n  };\n  var expandAllGroups = function expandAllGroups() {\n    setCollapsedAndExpanded({\n      expandedGroups: true,\n      collapsedGroups: {}\n    });\n  };\n  return _objectSpread({\n    computedGroupBy: computedGroupBy,\n    onGroupToggle: onGroupToggle,\n    toggleGroup: toggleGroup,\n    setGroupBy: setGroupBy,\n    removeGroupByColumn: removeGroupByColumn,\n    addGroupByColumn: addGroupByColumn,\n    isGroupCollapsed: isGroupCollapsed,\n    expandGroup: expandGroup,\n    collapseGroup: collapseGroup,\n    computedCollapsedGroups: computedCollapsedGroups,\n    computedExpandedGroups: computedExpandedGroups,\n    onGroupByChange: setGroupBy,\n    setComputedGroupRelatedInfo: setComputedGroupRelatedInfo,\n    collapseAllGroups: collapseAllGroups,\n    expandAllGroups: expandAllGroups\n  }, computedGroupRelatedInfo);\n};\nvar _default = useGroupBy;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}