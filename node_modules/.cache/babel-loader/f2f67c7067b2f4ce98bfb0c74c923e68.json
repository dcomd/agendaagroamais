{"ast":null,"code":"/** \n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getCurrencyForCountryCode;\nvar _countryCurrencyCodes = _interopRequireDefault(require(\"../data/countryCurrencyCodes\"));\nvar _countries = _interopRequireDefault(require(\"../data/countries\"));\nvar _find = _interopRequireDefault(require(\"./find\"));\nvar countriesByCountryCode = _countries.default.reduce(function (accumulator, country) {\n  accumulator[country.code] = country.name;\n  accumulator[country.code.toLowerCase()] = country.name;\n  return accumulator;\n}, {});\nfunction getCurrencyForCountryCode(locale) {\n  var currencyDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'symbol';\n  var code = locale.split('-')[1];\n  var countryNameByCode = countriesByCountryCode[code];\n  if (countryNameByCode) {\n    var country = countriesByCountryCode[code] && countriesByCountryCode[code].toLowerCase();\n    var currency = (0, _find.default)(_countryCurrencyCodes.default, function (countryCode) {\n      return (countryCode.countries || []).indexOf(country) !== -1;\n    });\n    if (currency) {\n      return new Number(1).toLocaleString(locale, {\n        style: 'currency',\n        currency: currency.code,\n        currencyDisplay: currencyDisplay\n      }).replace(/[0-9\\.\\,]/g, '');\n    }\n    return '';\n  } else {\n    console.error(\"Cannot get currency based on country code. Country \".concat(code, \" not found.\"));\n    return '';\n  }\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","getCurrencyForCountryCode","_countryCurrencyCodes","_countries","_find","countriesByCountryCode","reduce","accumulator","country","code","name","toLowerCase","locale","currencyDisplay","arguments","length","undefined","split","countryNameByCode","currency","countryCode","countries","indexOf","Number","toLocaleString","style","replace","console","error","concat"],"sources":["/Users/alexandre.nepomuceno/Documents/agendaagroamais/node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-currency-for-country-code.js"],"sourcesContent":["/** \n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getCurrencyForCountryCode;\nvar _countryCurrencyCodes = _interopRequireDefault(require(\"../data/countryCurrencyCodes\"));\nvar _countries = _interopRequireDefault(require(\"../data/countries\"));\nvar _find = _interopRequireDefault(require(\"./find\"));\nvar countriesByCountryCode = _countries.default.reduce(function (accumulator, country) {\n  accumulator[country.code] = country.name;\n  accumulator[country.code.toLowerCase()] = country.name;\n  return accumulator;\n}, {});\nfunction getCurrencyForCountryCode(locale) {\n  var currencyDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'symbol';\n  var code = locale.split('-')[1];\n  var countryNameByCode = countriesByCountryCode[code];\n  if (countryNameByCode) {\n    var country = countriesByCountryCode[code] && countriesByCountryCode[code].toLowerCase();\n    var currency = (0, _find.default)(_countryCurrencyCodes.default, function (countryCode) {\n      return (countryCode.countries || []).indexOf(country) !== -1;\n    });\n    if (currency) {\n      return new Number(1).toLocaleString(locale, {\n        style: 'currency',\n        currency: currency.code,\n        currencyDisplay: currencyDisplay\n      }).replace(/[0-9\\.\\,]/g, '');\n    }\n    return '';\n  } else {\n    console.error(\"Cannot get currency based on country code. Country \".concat(code, \" not found.\"));\n    return '';\n  }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAA8C,CAAC;AACpFC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,yBAAyB;AAC3C,IAAIC,qBAAqB,GAAGR,sBAAsB,CAACC,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAC3F,IAAIQ,UAAU,GAAGT,sBAAsB,CAACC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACrE,IAAIS,KAAK,GAAGV,sBAAsB,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACrD,IAAIU,sBAAsB,GAAGF,UAAU,CAACH,OAAO,CAACM,MAAM,CAAC,UAAUC,WAAW,EAAEC,OAAO,EAAE;EACrFD,WAAW,CAACC,OAAO,CAACC,IAAI,CAAC,GAAGD,OAAO,CAACE,IAAI;EACxCH,WAAW,CAACC,OAAO,CAACC,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC,GAAGH,OAAO,CAACE,IAAI;EACtD,OAAOH,WAAW;AACpB,CAAC,EAAE,CAAC,CAAC,CAAC;AACN,SAASN,yBAAyBA,CAACW,MAAM,EAAE;EACzC,IAAIC,eAAe,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ;EAClG,IAAIL,IAAI,GAAGG,MAAM,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC/B,IAAIC,iBAAiB,GAAGb,sBAAsB,CAACI,IAAI,CAAC;EACpD,IAAIS,iBAAiB,EAAE;IACrB,IAAIV,OAAO,GAAGH,sBAAsB,CAACI,IAAI,CAAC,IAAIJ,sBAAsB,CAACI,IAAI,CAAC,CAACE,WAAW,CAAC,CAAC;IACxF,IAAIQ,QAAQ,GAAG,CAAC,CAAC,EAAEf,KAAK,CAACJ,OAAO,EAAEE,qBAAqB,CAACF,OAAO,EAAE,UAAUoB,WAAW,EAAE;MACtF,OAAO,CAACA,WAAW,CAACC,SAAS,IAAI,EAAE,EAAEC,OAAO,CAACd,OAAO,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC,CAAC;IACF,IAAIW,QAAQ,EAAE;MACZ,OAAO,IAAII,MAAM,CAAC,CAAC,CAAC,CAACC,cAAc,CAACZ,MAAM,EAAE;QAC1Ca,KAAK,EAAE,UAAU;QACjBN,QAAQ,EAAEA,QAAQ,CAACV,IAAI;QACvBI,eAAe,EAAEA;MACnB,CAAC,CAAC,CAACa,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;IAC9B;IACA,OAAO,EAAE;EACX,CAAC,MAAM;IACLC,OAAO,CAACC,KAAK,CAAC,qDAAqD,CAACC,MAAM,CAACpB,IAAI,EAAE,aAAa,CAAC,CAAC;IAChG,OAAO,EAAE;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"script"}