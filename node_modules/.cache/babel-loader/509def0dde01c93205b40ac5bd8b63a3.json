{"ast":null,"code":"/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar getRangesForTree = function getRangesForTree(_ref) {\n  var data = _ref.data,\n    initialOffset = _ref.initialOffset,\n    rowHeightManager = _ref.rowHeightManager,\n    initialScrollTop = _ref.initialScrollTop;\n  var ranges = data.map(function (row, i) {\n    if (!row) {\n      return;\n    }\n    var rowHeight = rowHeightManager.getRowHeight(i);\n    var top = rowHeightManager.getRowOffset(i);\n    var offset = top + initialOffset - (initialScrollTop || 0);\n    var bottom = offset + rowHeight;\n    var nodeProps = row.__nodeProps;\n    var result = {\n      top: offset,\n      bottom: bottom,\n      height: rowHeight,\n      index: i,\n      keyPath: nodeProps.key,\n      depth: nodeProps.depth,\n      parent: nodeProps.initialNodes !== undefined\n    };\n    return result;\n  });\n  return ranges;\n};\nvar _default = getRangesForTree;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getRangesForTree","_ref","data","initialOffset","rowHeightManager","initialScrollTop","ranges","map","row","i","rowHeight","getRowHeight","top","getRowOffset","offset","bottom","nodeProps","__nodeProps","result","height","index","keyPath","key","depth","parent","initialNodes","undefined","_default"],"sources":["/Users/alexandre.nepomuceno/Documents/agenda/node_modules/@inovua/reactdatagrid-enterprise/plugins/row-reorder/utils/getRangesForTree.js"],"sourcesContent":["/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar getRangesForTree = function getRangesForTree(_ref) {\n  var data = _ref.data,\n    initialOffset = _ref.initialOffset,\n    rowHeightManager = _ref.rowHeightManager,\n    initialScrollTop = _ref.initialScrollTop;\n  var ranges = data.map(function (row, i) {\n    if (!row) {\n      return;\n    }\n    var rowHeight = rowHeightManager.getRowHeight(i);\n    var top = rowHeightManager.getRowOffset(i);\n    var offset = top + initialOffset - (initialScrollTop || 0);\n    var bottom = offset + rowHeight;\n    var nodeProps = row.__nodeProps;\n    var result = {\n      top: offset,\n      bottom: bottom,\n      height: rowHeight,\n      index: i,\n      keyPath: nodeProps.key,\n      depth: nodeProps.depth,\n      parent: nodeProps.initialNodes !== undefined\n    };\n    return result;\n  });\n  return ranges;\n};\nvar _default = getRangesForTree;\nexports.default = _default;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,IAAIC,gBAAgB,GAAG,SAASA,gBAAgBA,CAACC,IAAI,EAAE;EACrD,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;IAClBC,aAAa,GAAGF,IAAI,CAACE,aAAa;IAClCC,gBAAgB,GAAGH,IAAI,CAACG,gBAAgB;IACxCC,gBAAgB,GAAGJ,IAAI,CAACI,gBAAgB;EAC1C,IAAIC,MAAM,GAAGJ,IAAI,CAACK,GAAG,CAAC,UAAUC,GAAG,EAAEC,CAAC,EAAE;IACtC,IAAI,CAACD,GAAG,EAAE;MACR;IACF;IACA,IAAIE,SAAS,GAAGN,gBAAgB,CAACO,YAAY,CAACF,CAAC,CAAC;IAChD,IAAIG,GAAG,GAAGR,gBAAgB,CAACS,YAAY,CAACJ,CAAC,CAAC;IAC1C,IAAIK,MAAM,GAAGF,GAAG,GAAGT,aAAa,IAAIE,gBAAgB,IAAI,CAAC,CAAC;IAC1D,IAAIU,MAAM,GAAGD,MAAM,GAAGJ,SAAS;IAC/B,IAAIM,SAAS,GAAGR,GAAG,CAACS,WAAW;IAC/B,IAAIC,MAAM,GAAG;MACXN,GAAG,EAAEE,MAAM;MACXC,MAAM,EAAEA,MAAM;MACdI,MAAM,EAAET,SAAS;MACjBU,KAAK,EAAEX,CAAC;MACRY,OAAO,EAAEL,SAAS,CAACM,GAAG;MACtBC,KAAK,EAAEP,SAAS,CAACO,KAAK;MACtBC,MAAM,EAAER,SAAS,CAACS,YAAY,KAAKC;IACrC,CAAC;IACD,OAAOR,MAAM;EACf,CAAC,CAAC;EACF,OAAOZ,MAAM;AACf,CAAC;AACD,IAAIqB,QAAQ,GAAG3B,gBAAgB;AAC/BH,OAAO,CAACE,OAAO,GAAG4B,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}