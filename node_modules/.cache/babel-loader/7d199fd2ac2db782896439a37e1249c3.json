{"ast":null,"code":"/** \n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = convertStringToNumber;\nfunction convertStringToNumber(stringToConvert) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _props$decimalDelimit = props.decimalDelimiter,\n    decimalDelimiter = _props$decimalDelimit === void 0 ? '.' : _props$decimalDelimit,\n    _props$digitGroupDeli = props.digitGroupDelimiter,\n    digitGroupDelimiter = _props$digitGroupDeli === void 0 ? ',' : _props$digitGroupDeli,\n    _props$min = props.min,\n    min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n    _props$max = props.max,\n    max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max;\n  if (digitGroupDelimiter == '') {\n    return ',';\n  }\n  if (!stringToConvert) {\n    return NaN;\n  }\n  var cleanedString = stringToConvert;\n  var decmialPosition = cleanedString.lastIndexOf(decimalDelimiter);\n  if (decmialPosition !== -1 && decimalDelimiter !== '.') {\n    cleanedString = [cleanedString.substring(0, decmialPosition).replace(new RegExp(\"[\\\\\".concat(digitGroupDelimiter, \"]\"), 'g'), ''), cleanedString.substring(decmialPosition).replace(new RegExp(\"[\\\\\".concat(decimalDelimiter, \"]\"), 'g'), '.')].join('');\n  } else {\n    cleanedString = cleanedString.replace(new RegExp(\"[\\\\\".concat(digitGroupDelimiter, \"]\"), 'g'), '');\n  }\n  var result = parseFloat(cleanedString, 10);\n  if (result < min) {\n    result = min;\n  }\n  if (result > max) {\n    result = max;\n  }\n  return result;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","convertStringToNumber","stringToConvert","props","arguments","length","undefined","_props$decimalDelimit","decimalDelimiter","_props$digitGroupDeli","digitGroupDelimiter","_props$min","min","Number","MIN_SAFE_INTEGER","_props$max","max","MAX_SAFE_INTEGER","NaN","cleanedString","decmialPosition","lastIndexOf","substring","replace","RegExp","concat","join","result","parseFloat"],"sources":["/Users/alexandre.nepomuceno/Documents/agendaagroamais/node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/convert-string-to-number.js"],"sourcesContent":["/** \n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = convertStringToNumber;\nfunction convertStringToNumber(stringToConvert) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _props$decimalDelimit = props.decimalDelimiter,\n    decimalDelimiter = _props$decimalDelimit === void 0 ? '.' : _props$decimalDelimit,\n    _props$digitGroupDeli = props.digitGroupDelimiter,\n    digitGroupDelimiter = _props$digitGroupDeli === void 0 ? ',' : _props$digitGroupDeli,\n    _props$min = props.min,\n    min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n    _props$max = props.max,\n    max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max;\n  if (digitGroupDelimiter == '') {\n    return ',';\n  }\n  if (!stringToConvert) {\n    return NaN;\n  }\n  var cleanedString = stringToConvert;\n  var decmialPosition = cleanedString.lastIndexOf(decimalDelimiter);\n  if (decmialPosition !== -1 && decimalDelimiter !== '.') {\n    cleanedString = [cleanedString.substring(0, decmialPosition).replace(new RegExp(\"[\\\\\".concat(digitGroupDelimiter, \"]\"), 'g'), ''), cleanedString.substring(decmialPosition).replace(new RegExp(\"[\\\\\".concat(decimalDelimiter, \"]\"), 'g'), '.')].join('');\n  } else {\n    cleanedString = cleanedString.replace(new RegExp(\"[\\\\\".concat(digitGroupDelimiter, \"]\"), 'g'), '');\n  }\n  var result = parseFloat(cleanedString, 10);\n  if (result < min) {\n    result = min;\n  }\n  if (result > max) {\n    result = max;\n  }\n  return result;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,qBAAqB;AACvC,SAASA,qBAAqBA,CAACC,eAAe,EAAE;EAC9C,IAAIC,KAAK,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAClF,IAAIG,qBAAqB,GAAGJ,KAAK,CAACK,gBAAgB;IAChDA,gBAAgB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAG,GAAG,GAAGA,qBAAqB;IACjFE,qBAAqB,GAAGN,KAAK,CAACO,mBAAmB;IACjDA,mBAAmB,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAG,GAAG,GAAGA,qBAAqB;IACpFE,UAAU,GAAGR,KAAK,CAACS,GAAG;IACtBA,GAAG,GAAGD,UAAU,KAAK,KAAK,CAAC,GAAGE,MAAM,CAACC,gBAAgB,GAAGH,UAAU;IAClEI,UAAU,GAAGZ,KAAK,CAACa,GAAG;IACtBA,GAAG,GAAGD,UAAU,KAAK,KAAK,CAAC,GAAGF,MAAM,CAACI,gBAAgB,GAAGF,UAAU;EACpE,IAAIL,mBAAmB,IAAI,EAAE,EAAE;IAC7B,OAAO,GAAG;EACZ;EACA,IAAI,CAACR,eAAe,EAAE;IACpB,OAAOgB,GAAG;EACZ;EACA,IAAIC,aAAa,GAAGjB,eAAe;EACnC,IAAIkB,eAAe,GAAGD,aAAa,CAACE,WAAW,CAACb,gBAAgB,CAAC;EACjE,IAAIY,eAAe,KAAK,CAAC,CAAC,IAAIZ,gBAAgB,KAAK,GAAG,EAAE;IACtDW,aAAa,GAAG,CAACA,aAAa,CAACG,SAAS,CAAC,CAAC,EAAEF,eAAe,CAAC,CAACG,OAAO,CAAC,IAAIC,MAAM,CAAC,KAAK,CAACC,MAAM,CAACf,mBAAmB,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,EAAES,aAAa,CAACG,SAAS,CAACF,eAAe,CAAC,CAACG,OAAO,CAAC,IAAIC,MAAM,CAAC,KAAK,CAACC,MAAM,CAACjB,gBAAgB,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAACkB,IAAI,CAAC,EAAE,CAAC;EAC1P,CAAC,MAAM;IACLP,aAAa,GAAGA,aAAa,CAACI,OAAO,CAAC,IAAIC,MAAM,CAAC,KAAK,CAACC,MAAM,CAACf,mBAAmB,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;EACpG;EACA,IAAIiB,MAAM,GAAGC,UAAU,CAACT,aAAa,EAAE,EAAE,CAAC;EAC1C,IAAIQ,MAAM,GAAGf,GAAG,EAAE;IAChBe,MAAM,GAAGf,GAAG;EACd;EACA,IAAIe,MAAM,GAAGX,GAAG,EAAE;IAChBW,MAAM,GAAGX,GAAG;EACd;EACA,OAAOW,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script"}