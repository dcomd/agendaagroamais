{"ast":null,"code":"/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar updateTreeDataIds = function updateTreeDataIds(data, config) {\n  var idProperty = config.idProperty;\n  var nodesName = config.nodesName;\n  var updateIds = function updateIds(dataArr) {\n    for (var i = 0; i < dataArr.length; i++) {\n      var item = dataArr[i];\n      if (!item) {\n        continue;\n      }\n      var itemNodes = item[nodesName];\n      item[idProperty] = i + 1;\n      if (Array.isArray(itemNodes)) {\n        updateIds(itemNodes);\n      }\n    }\n  };\n  updateIds(data);\n  return data;\n};\nvar computeTreeData = function computeTreeData(dataArray, config) {\n  var idProperty = config.idProperty;\n  var nodesName = config.nodesName;\n  var pathSeparator = config.pathSeparator;\n  var expandedNodes = config.expandedNodes;\n  var generateIdFromPath = config.generateIdFromPath;\n  var selectedPath = config.selectedPath;\n  var destinationPath = config.destinationPath;\n  var selectedItem = config.selectedItem;\n  var counter = 0;\n  var computeData = function computeData(data, idSelected, destinationId) {\n    var result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var parentNode = arguments.length > 4 ? arguments[4] : undefined;\n    var initialIdSelected = '';\n    for (var i = 0; i < data.length; i++) {\n      if (initialIdSelected === '') {\n        initialIdSelected = idSelected;\n      }\n      if (counter === 2) {\n        break;\n      }\n      var item = data[i];\n      if (!item) {\n        continue;\n      }\n      var itemId = \"\".concat(item[idProperty]);\n      var itemNodes = item[nodesName];\n      var parentNodeId = parentNode ? \"\".concat(parentNode[idProperty]) : undefined;\n      var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(item[idProperty]) : \"\".concat(item[idProperty]);\n      if (generateIdFromPath) {\n        item[idProperty] = path;\n      }\n      if (parentNode === undefined) {\n        result.push(item);\n      } else {\n        var parentNodes = parentNode[nodesName];\n        if (path === initialIdSelected) {\n          parentNodes.splice(i, 1);\n          counter++;\n        }\n        if (path === destinationId) {\n          var nodeId = item[idProperty].split(pathSeparator);\n          var idInNodes = nodeId.splice(nodeId.length - 1, 1);\n          var index = parseInt(idInNodes);\n          parentNodes.splice(index, 0, selectedItem);\n          counter++;\n        }\n      }\n      if (expandedNodes && expandedNodes[itemId]) {\n        if (Array.isArray(itemNodes)) {\n          computeData(itemNodes, idSelected, destinationId, result, item);\n        }\n      }\n    }\n    return result;\n  };\n  var computedData = computeData(dataArray, selectedPath, destinationPath);\n  var updatedData = updateTreeDataIds(computedData, config);\n  return updatedData;\n};\nvar getItemById = function getItemById(id, data) {\n  return data.find(function (item) {\n    return item.id === id;\n  });\n};\nvar updateTreeData = function updateTreeData(props, _ref) {\n  var selectedPath = _ref.selectedPath,\n    destinationPath = _ref.destinationPath;\n  var originalData = props.originalData || [];\n  var selectedItem = getItemById(selectedPath, props.data);\n  var config = {\n    idProperty: props.idProperty,\n    nodesName: props.nodesProperty,\n    pathSeparator: props.nodePathSeparator,\n    expandedNodes: props.computedExpandedNodes,\n    generateIdFromPath: props.generateIdFromPath,\n    selectedPath: selectedPath,\n    destinationPath: destinationPath,\n    selectedItem: selectedItem\n  };\n  computeTreeData(originalData, config);\n};\nvar _default = updateTreeData;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","updateTreeDataIds","data","config","idProperty","nodesName","updateIds","dataArr","i","length","item","itemNodes","Array","isArray","computeTreeData","dataArray","pathSeparator","expandedNodes","generateIdFromPath","selectedPath","destinationPath","selectedItem","counter","computeData","idSelected","destinationId","result","arguments","undefined","parentNode","initialIdSelected","itemId","concat","parentNodeId","path","push","parentNodes","splice","nodeId","split","idInNodes","index","parseInt","computedData","updatedData","getItemById","id","find","updateTreeData","props","_ref","originalData","nodesProperty","nodePathSeparator","computedExpandedNodes","_default"],"sources":["/Users/alexandre.nepomuceno/Documents/agendaagroamais/node_modules/@inovua/reactdatagrid-enterprise/plugins/tree/tree/updateTreeData.js"],"sourcesContent":["/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar updateTreeDataIds = function updateTreeDataIds(data, config) {\n  var idProperty = config.idProperty;\n  var nodesName = config.nodesName;\n  var updateIds = function updateIds(dataArr) {\n    for (var i = 0; i < dataArr.length; i++) {\n      var item = dataArr[i];\n      if (!item) {\n        continue;\n      }\n      var itemNodes = item[nodesName];\n      item[idProperty] = i + 1;\n      if (Array.isArray(itemNodes)) {\n        updateIds(itemNodes);\n      }\n    }\n  };\n  updateIds(data);\n  return data;\n};\nvar computeTreeData = function computeTreeData(dataArray, config) {\n  var idProperty = config.idProperty;\n  var nodesName = config.nodesName;\n  var pathSeparator = config.pathSeparator;\n  var expandedNodes = config.expandedNodes;\n  var generateIdFromPath = config.generateIdFromPath;\n  var selectedPath = config.selectedPath;\n  var destinationPath = config.destinationPath;\n  var selectedItem = config.selectedItem;\n  var counter = 0;\n  var computeData = function computeData(data, idSelected, destinationId) {\n    var result = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var parentNode = arguments.length > 4 ? arguments[4] : undefined;\n    var initialIdSelected = '';\n    for (var i = 0; i < data.length; i++) {\n      if (initialIdSelected === '') {\n        initialIdSelected = idSelected;\n      }\n      if (counter === 2) {\n        break;\n      }\n      var item = data[i];\n      if (!item) {\n        continue;\n      }\n      var itemId = \"\".concat(item[idProperty]);\n      var itemNodes = item[nodesName];\n      var parentNodeId = parentNode ? \"\".concat(parentNode[idProperty]) : undefined;\n      var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(item[idProperty]) : \"\".concat(item[idProperty]);\n      if (generateIdFromPath) {\n        item[idProperty] = path;\n      }\n      if (parentNode === undefined) {\n        result.push(item);\n      } else {\n        var parentNodes = parentNode[nodesName];\n        if (path === initialIdSelected) {\n          parentNodes.splice(i, 1);\n          counter++;\n        }\n        if (path === destinationId) {\n          var nodeId = item[idProperty].split(pathSeparator);\n          var idInNodes = nodeId.splice(nodeId.length - 1, 1);\n          var index = parseInt(idInNodes);\n          parentNodes.splice(index, 0, selectedItem);\n          counter++;\n        }\n      }\n      if (expandedNodes && expandedNodes[itemId]) {\n        if (Array.isArray(itemNodes)) {\n          computeData(itemNodes, idSelected, destinationId, result, item);\n        }\n      }\n    }\n    return result;\n  };\n  var computedData = computeData(dataArray, selectedPath, destinationPath);\n  var updatedData = updateTreeDataIds(computedData, config);\n  return updatedData;\n};\nvar getItemById = function getItemById(id, data) {\n  return data.find(function (item) {\n    return item.id === id;\n  });\n};\nvar updateTreeData = function updateTreeData(props, _ref) {\n  var selectedPath = _ref.selectedPath,\n    destinationPath = _ref.destinationPath;\n  var originalData = props.originalData || [];\n  var selectedItem = getItemById(selectedPath, props.data);\n  var config = {\n    idProperty: props.idProperty,\n    nodesName: props.nodesProperty,\n    pathSeparator: props.nodePathSeparator,\n    expandedNodes: props.computedExpandedNodes,\n    generateIdFromPath: props.generateIdFromPath,\n    selectedPath: selectedPath,\n    destinationPath: destinationPath,\n    selectedItem: selectedItem\n  };\n  computeTreeData(originalData, config);\n};\nvar _default = updateTreeData;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}