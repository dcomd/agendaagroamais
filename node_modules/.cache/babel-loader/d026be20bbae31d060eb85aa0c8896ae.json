{"ast":null,"code":"/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar dropIndexValidation = function dropIndexValidation(_ref) {\n  var data = _ref.data,\n    count = _ref.count,\n    dragIndex = _ref.dragIndex,\n    dropIndex = _ref.dropIndex,\n    isRowReorderValid = _ref.isRowReorderValid,\n    selectedGroup = _ref.selectedGroup,\n    selectedParent = _ref.selectedParent,\n    nodePathSeparator = _ref.nodePathSeparator,\n    groupPathSeparator = _ref.groupPathSeparator,\n    allowRowReorderBetweenGroups = _ref.allowRowReorderBetweenGroups,\n    computedGroupBy = _ref.computedGroupBy,\n    computedTreeEnabled = _ref.computedTreeEnabled,\n    generateIdFromPath = _ref.generateIdFromPath,\n    enableTreeRowReorderParentChange = _ref.enableTreeRowReorderParentChange;\n  var iterateRows = false;\n  var validDropPositions = [];\n  if (computedGroupBy && computedGroupBy.length > 0) {\n    validDropPositions = data.reduce(function (acc, curr, i) {\n      if (curr.__group) {\n        var value = curr.keyPath.join(groupPathSeparator);\n        if (!value.localeCompare(selectedGroup)) {\n          iterateRows = true;\n        } else {\n          if (!allowRowReorderBetweenGroups) {\n            iterateRows = false;\n          }\n        }\n      }\n      if (allowRowReorderBetweenGroups) {\n        iterateRows = true;\n      }\n      if (!curr.__group && iterateRows) {\n        acc[i] = true;\n      } else {\n        acc[i] = false;\n      }\n      return acc;\n    }, {});\n  } else if (computedTreeEnabled && generateIdFromPath) {\n    validDropPositions = data.reduce(function (acc, curr, i) {\n      var _curr$__nodeProps = curr.__nodeProps,\n        leafNode = _curr$__nodeProps.leafNode,\n        path = _curr$__nodeProps.path;\n      if (!data[dragIndex].__nodeProps.leafNode) {\n        acc[i] = false;\n      } else {\n        var parentNodeId = getParentNodeId(path, nodePathSeparator);\n        var selectedParentNodeId = selectedParent ? getParentNodeId(selectedParent, nodePathSeparator) : '';\n        if (!leafNode) {\n          acc[i] = false;\n        } else {\n          if (enableTreeRowReorderParentChange) {\n            acc[i] = true;\n          } else {\n            if (parentNodeId === selectedParentNodeId) {\n              acc[i] = true;\n            } else {\n              acc[i] = false;\n            }\n          }\n        }\n      }\n      return acc;\n    }, {});\n  } else {\n    validDropPositions = (0, _toConsumableArray2.default)(Array(count)).reduce(function (acc, _curr, i) {\n      acc[i] = true;\n      return acc;\n    }, {});\n    validDropPositions[count] = true;\n  }\n  if (isRowReorderValid) {\n    validDropPositions[dropIndex] = isRowReorderValid({\n      dragRowIndex: dragIndex,\n      dropRowIndex: dropIndex\n    });\n  }\n  return validDropPositions;\n};\nvar getParentNodeId = function getParentNodeId(path, pathSeparator) {\n  if (pathSeparator) {\n    var parsedPath = path.split(pathSeparator);\n    parsedPath.pop();\n    var parentNodeId = parsedPath.join(pathSeparator);\n    return parentNodeId;\n  }\n  return path;\n};\nvar _default = dropIndexValidation;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_toConsumableArray2","dropIndexValidation","_ref","data","count","dragIndex","dropIndex","isRowReorderValid","selectedGroup","selectedParent","nodePathSeparator","groupPathSeparator","allowRowReorderBetweenGroups","computedGroupBy","computedTreeEnabled","generateIdFromPath","enableTreeRowReorderParentChange","iterateRows","validDropPositions","length","reduce","acc","curr","i","__group","keyPath","join","localeCompare","_curr$__nodeProps","__nodeProps","leafNode","path","parentNodeId","getParentNodeId","selectedParentNodeId","Array","_curr","dragRowIndex","dropRowIndex","pathSeparator","parsedPath","split","pop","_default"],"sources":["/Users/alexandre.nepomuceno/Documents/agenda/node_modules/@inovua/reactdatagrid-enterprise/plugins/row-reorder/utils/dropIndexValidation.js"],"sourcesContent":["/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar dropIndexValidation = function dropIndexValidation(_ref) {\n  var data = _ref.data,\n    count = _ref.count,\n    dragIndex = _ref.dragIndex,\n    dropIndex = _ref.dropIndex,\n    isRowReorderValid = _ref.isRowReorderValid,\n    selectedGroup = _ref.selectedGroup,\n    selectedParent = _ref.selectedParent,\n    nodePathSeparator = _ref.nodePathSeparator,\n    groupPathSeparator = _ref.groupPathSeparator,\n    allowRowReorderBetweenGroups = _ref.allowRowReorderBetweenGroups,\n    computedGroupBy = _ref.computedGroupBy,\n    computedTreeEnabled = _ref.computedTreeEnabled,\n    generateIdFromPath = _ref.generateIdFromPath,\n    enableTreeRowReorderParentChange = _ref.enableTreeRowReorderParentChange;\n  var iterateRows = false;\n  var validDropPositions = [];\n  if (computedGroupBy && computedGroupBy.length > 0) {\n    validDropPositions = data.reduce(function (acc, curr, i) {\n      if (curr.__group) {\n        var value = curr.keyPath.join(groupPathSeparator);\n        if (!value.localeCompare(selectedGroup)) {\n          iterateRows = true;\n        } else {\n          if (!allowRowReorderBetweenGroups) {\n            iterateRows = false;\n          }\n        }\n      }\n      if (allowRowReorderBetweenGroups) {\n        iterateRows = true;\n      }\n      if (!curr.__group && iterateRows) {\n        acc[i] = true;\n      } else {\n        acc[i] = false;\n      }\n      return acc;\n    }, {});\n  } else if (computedTreeEnabled && generateIdFromPath) {\n    validDropPositions = data.reduce(function (acc, curr, i) {\n      var _curr$__nodeProps = curr.__nodeProps,\n        leafNode = _curr$__nodeProps.leafNode,\n        path = _curr$__nodeProps.path;\n      if (!data[dragIndex].__nodeProps.leafNode) {\n        acc[i] = false;\n      } else {\n        var parentNodeId = getParentNodeId(path, nodePathSeparator);\n        var selectedParentNodeId = selectedParent ? getParentNodeId(selectedParent, nodePathSeparator) : '';\n        if (!leafNode) {\n          acc[i] = false;\n        } else {\n          if (enableTreeRowReorderParentChange) {\n            acc[i] = true;\n          } else {\n            if (parentNodeId === selectedParentNodeId) {\n              acc[i] = true;\n            } else {\n              acc[i] = false;\n            }\n          }\n        }\n      }\n      return acc;\n    }, {});\n  } else {\n    validDropPositions = (0, _toConsumableArray2.default)(Array(count)).reduce(function (acc, _curr, i) {\n      acc[i] = true;\n      return acc;\n    }, {});\n    validDropPositions[count] = true;\n  }\n  if (isRowReorderValid) {\n    validDropPositions[dropIndex] = isRowReorderValid({\n      dragRowIndex: dragIndex,\n      dropRowIndex: dropIndex\n    });\n  }\n  return validDropPositions;\n};\nvar getParentNodeId = function getParentNodeId(path, pathSeparator) {\n  if (pathSeparator) {\n    var parsedPath = path.split(pathSeparator);\n    parsedPath.pop();\n    var parentNodeId = parsedPath.join(pathSeparator);\n    return parentNodeId;\n  }\n  return path;\n};\nvar _default = dropIndexValidation;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}