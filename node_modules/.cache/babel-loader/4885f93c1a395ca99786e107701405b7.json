{"ast":null,"code":"/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _useProperty5 = _interopRequireDefault(require(\"../useProperty\"));\nvar _isSelectionEnabled = _interopRequireDefault(require(\"./isSelectionEnabled\"));\nvar _isMultiSelect = _interopRequireDefault(require(\"./isMultiSelect\"));\nvar _isSelectionControlled = _interopRequireDefault(require(\"./isSelectionControlled\"));\nvar _handleSelection = require(\"../useRow/handleSelection\");\nvar _batchUpdate = _interopRequireDefault(require(\"../../utils/batchUpdate\"));\nvar _usePrevious = _interopRequireDefault(require(\"../usePrevious\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nvar EMPTY_OBJECT = {};\nvar getUnselectedFromProps = function getUnselectedFromProps(computedProps) {\n  if (!computedProps) {\n    return null;\n  }\n  if (computedProps.computedUnselected === undefined) {\n    return null;\n  }\n  return computedProps.computedUnselected;\n};\nvar getUnselectedCountFromProps = function getUnselectedCountFromProps(computedProps, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n  if (!computedProps.computedRowMultiSelectionEnabled) {\n    return 0;\n  }\n  unselected = unselected === undefined ? getUnselectedFromProps(computedProps) : unselected;\n  return unselected ? Object.keys(unselected).length : 0;\n};\nvar getSelectedCountFromProps = function getSelectedCountFromProps(computedProps, selected, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n  var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n  selected = selected === undefined ? computedProps.computedSelected : selected;\n  if (multiSelect && selected === true) {\n    var unselectedCount = getUnselectedCountFromProps(computedProps, unselected);\n    return computedProps.paginationCount - unselectedCount;\n  }\n  return multiSelect ? selected ? Object.keys(selected).length : 0 : !selected || Object.keys(selected).length === 0 ? 0 : 1;\n};\nvar useUnselected = function useUnselected(props, _ref, _computedPropsRef) {\n  var rowSelectionEnabled = _ref.rowSelectionEnabled,\n    rowMultiSelectionEnabled = _ref.rowMultiSelectionEnabled;\n  var _useProperty = (0, _useProperty5.default)(props, 'unselected'),\n    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n    unselected = _useProperty2[0],\n    setUnselected = _useProperty2[1];\n  if (!rowSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n  if (!rowMultiSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n  return {\n    unselected: unselected,\n    setUnselected: setUnselected\n  };\n};\nvar useSelected = function useSelected(props, _computedProps, computedPropsRef) {\n  var _useProperty3 = (0, _useProperty5.default)(props, 'selected', undefined, {\n      onChange: function onChange(selected) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          silent = _ref2.silent,\n          unselected = _ref2.unselected,\n          data = _ref2.data;\n        var computedProps = computedPropsRef.current;\n        if (props.onSelectionChange && !silent) {\n          props.onSelectionChange({\n            selected: selected,\n            data: data,\n            unselected: unselected !== undefined ? unselected : computedProps != null ? computedProps.computedUnselected : null\n          });\n        }\n      }\n    }),\n    _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n    selected = _useProperty4[0],\n    setSelected = _useProperty4[1];\n  var rowSelectionEnabled = (0, _isSelectionEnabled.default)(props);\n  var rowMultiSelectionEnabled = (0, _isMultiSelect.default)(props);\n  if (!rowSelectionEnabled) {\n    return {\n      selected: null,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n  if ((0, _isSelectionControlled.default)(props)) {\n    return {\n      selected: selected,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n  if (rowMultiSelectionEnabled && ((0, _typeof2.default)(selected) != 'object' || !selected) && selected !== true) {\n    selected = EMPTY_OBJECT;\n  }\n  return {\n    selected: selected,\n    setSelected: setSelected,\n    rowSelectionEnabled: rowSelectionEnabled,\n    rowMultiSelectionEnabled: rowMultiSelectionEnabled\n  };\n};\nvar _default = function _default(props, computedProps, computedPropsRef) {\n  var _useSelected = useSelected(props, computedProps, computedPropsRef),\n    computedSelected = _useSelected.selected,\n    setSelected = _useSelected.setSelected,\n    rowMultiSelectionEnabled = _useSelected.rowMultiSelectionEnabled,\n    rowSelectionEnabled = _useSelected.rowSelectionEnabled;\n  var previousRowMultiSelectionEnabled = (0, _usePrevious.default)(rowMultiSelectionEnabled, rowMultiSelectionEnabled);\n  (0, _react.useEffect)(function () {\n    if (previousRowMultiSelectionEnabled === true && rowMultiSelectionEnabled === false) {\n      setSelected({});\n    }\n  }, [previousRowMultiSelectionEnabled, rowMultiSelectionEnabled]);\n  var computedRowSelectionEnabled = rowSelectionEnabled;\n  var computedRowMultiSelectionEnabled = rowMultiSelectionEnabled;\n  var _useUnselected = useUnselected(props, {\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    }, computedPropsRef),\n    computedUnselected = _useUnselected.unselected,\n    setUnselected = _useUnselected.setUnselected;\n  var computedSelectedCount = getSelectedCountFromProps({\n    computedPagination: computedProps.computedPagination,\n    computedRemoteData: computedProps.computedRemoteData,\n    paginationCount: computedProps.paginationCount,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedSelected, computedUnselected);\n  var computedUnselectedCount = getUnselectedCountFromProps({\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedUnselected);\n  var isSelectionEmpty = (0, _react.useCallback)(function () {\n    var selected = computedSelected;\n    var selectionEmpty = false;\n    if (selected == null) {\n      selectionEmpty = true;\n    }\n    if ((0, _typeof2.default)(selected) === 'object' && selected !== null) {\n      selectionEmpty = Object.keys(selected).length === 0;\n    }\n    return selectionEmpty;\n  }, [computedSelected]);\n  var getSelectedMap = (0, _react.useCallback)(function () {\n    if (computedRowMultiSelectionEnabled) {\n      return computedSelected;\n    }\n    return (0, _defineProperty2.default)({}, computedSelected, true);\n  }, [computedRowMultiSelectionEnabled, computedSelected]);\n  var getUnselected = (0, _react.useCallback)(function () {\n    return getUnselectedFromProps(computedPropsRef.current);\n  }, []);\n  var getUnselectedMap = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return {};\n    }\n    var unselected = getUnselected();\n    if (computedProps.computedRowMultiSelectionEnabled) {\n      return unselected || {};\n    }\n    return {};\n  }, [getUnselected]);\n  var getUnselectedCount = function getUnselectedCount(unselected) {\n    return getUnselectedCountFromProps(computedPropsRef.current, unselected);\n  };\n  var getSelectedCount = function getSelectedCount(selected, unselected) {\n    return getSelectedCountFromProps(computedPropsRef.current, selected, unselected);\n  };\n  var isRowSelected = (0, _react.useCallback)(function (data) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return false;\n    }\n    if (typeof data == 'number') {\n      data = computedProps.getItemAt(data);\n    }\n    var selectedMap = getSelectedMap();\n    var id = computedProps.getItemId(data);\n    if (selectedMap === true) {\n      var unselectedMap = getUnselectedMap();\n      return !unselectedMap[id];\n    }\n    return !!selectedMap[id];\n  }, [getSelectedMap, getUnselectedMap]);\n  var cellSelectionTmp = props.cellSelection || props.defaultCellSelection;\n  var activeCellDefined = props.activeCell !== undefined || props.defaultActiveCell !== undefined;\n  var computedHasRowNavigation = (computedRowSelectionEnabled || !cellSelectionTmp) && computedProps.computedActiveIndex > -1 ? true : props.enableKeyboardNavigation !== false && !cellSelectionTmp && !activeCellDefined;\n  if (props.enableKeyboardNavigation === false) {\n    computedHasRowNavigation = false;\n  }\n  var _computedProps$useCel = computedProps.useCellSelection(props, {\n      rowSelectionEnabled: rowSelectionEnabled,\n      listenOnCellEnter: computedProps.listenOnCellEnter,\n      hasRowNavigation: computedHasRowNavigation\n    }, computedPropsRef),\n    computedCellSelection = _computedProps$useCel.computedCellSelection,\n    setCellSelection = _computedProps$useCel.setCellSelection,\n    computedCellSelectionEnabled = _computedProps$useCel.cellSelectionEnabled,\n    computedCellMultiSelectionEnabled = _computedProps$useCel.cellMultiSelectionEnabled,\n    computedCellNavigationEnabled = _computedProps$useCel.cellNavigationEnabled,\n    computedActiveCell = _computedProps$useCel.computedActiveCell,\n    incrementActiveCell = _computedProps$useCel.incrementActiveCell,\n    getCellSelectionIdKey = _computedProps$useCel.getCellSelectionIdKey,\n    getCellSelectionBetween = _computedProps$useCel.getCellSelectionBetween,\n    toggleActiveCellSelection = _computedProps$useCel.toggleActiveCellSelection,\n    onCellEnter = _computedProps$useCel.onCellEnter,\n    setActiveCell = _computedProps$useCel.setActiveCell,\n    getCellSelectionKey = _computedProps$useCel.getCellSelectionKey,\n    cellDragStartRowIndex = _computedProps$useCel.cellDragStartRowIndex,\n    setCellDragStartRowIndex = _computedProps$useCel.setCellDragStartRowIndex,\n    onCellSelectionDraggerMouseDown = _computedProps$useCel.onCellSelectionDraggerMouseDown,\n    computedCellBulkUpdateMouseDown = _computedProps$useCel.computedCellBulkUpdateMouseDown,\n    bulkUpdateMouseDown = _computedProps$useCel.bulkUpdateMouseDown,\n    computedCellBulkUpdateMouseUp = _computedProps$useCel.computedCellBulkUpdateMouseUp;\n  var selectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (!computedProps.computedRowSelectionEnabled) {\n      return;\n    }\n    var data = computedProps.data;\n    var dataMap = computedProps.dataMap;\n    if (computedProps.computedGroupBy) {\n      dataMap = {};\n      data = data.map(function (d) {\n        var id = computedProps.getItemId(d);\n        dataMap[id] = id;\n      });\n    }\n    if (computedProps.computedTreeEnabled && computedProps.stickyTreeNodes) {\n      var vl = computedProps.getVirtualList();\n      vl.updateStickyRows(undefined, undefined, {\n        force: true\n      });\n    }\n    (0, _handleSelection.notifySelection)(computedProps, computedProps.computedRemoteData || computedProps.computedPagination ? data.length === 0 ? false : true : dataMap, data, null);\n  }, []);\n  var deselectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (computedProps.computedTreeEnabled && computedProps.stickyTreeNodes) {\n      var vl = computedProps.getVirtualList();\n      vl.updateStickyRows(undefined, undefined, {\n        force: true\n      });\n    }\n    (0, _handleSelection.notifySelection)(computedProps, {}, [], null);\n  }, []);\n  var setRowSelected = (0, _react.useCallback)(function (index, selected, event) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var queue = (0, _batchUpdate.default)();\n    if (computedProps.checkboxSelectEnableShiftKey && computedProps.computedRowMultiSelectionEnabled) {\n      if (event && event.target) {\n        var shiftKey = event.shiftKey,\n          metaKey = event.metaKey,\n          ctrlKey = event.ctrlKey;\n        if (shiftKey) {\n          var rowProps = {\n            data: computedProps.getItemAt(index),\n            rowIndex: index\n          };\n          (0, _handleSelection.handleSelection)(rowProps, computedProps, {\n            shiftKey: shiftKey,\n            metaKey: metaKey,\n            ctrlKey: ctrlKey\n          }, queue);\n          return;\n        }\n        computedProps.shiftKeyIndexRef.current = index;\n        computedProps.selectionIndexRef.current = index;\n      }\n    }\n    computedProps.setSelectedAt(index, selected, queue);\n    queue.commit();\n  }, [computedProps.initialProps.checkboxSelectEnableShiftKey]);\n  var setSelectedAt = (0, _react.useCallback)(function (index, selected, queue) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var data = computedProps.data[index];\n    if (!data) {\n      return;\n    }\n    var id = computedProps.getItemId(data);\n    computedProps.setSelectedById(id, selected, queue);\n  }, []);\n  var treeGridChildrenSelection = function treeGridChildrenSelection(dataArray, id, selected, clone, treeGridChildrenDeselectionEnabled, parentNode) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var idProperty = computedProps.idProperty;\n    var nodesName = computedProps.nodesProperty;\n    var pathSeparator = computedProps.nodePathSeparator;\n    var expandedNodes = computedProps.computedExpandedNodes || EMPTY_OBJECT;\n    var generateIdFromPath = computedProps.generateIdFromPath;\n    for (var i = 0; i < dataArray.length; i++) {\n      var item = dataArray[i];\n      if (item) {\n        var _id$split;\n        var itemId = item[idProperty];\n        var itemNodes = item[nodesName];\n        var parentNodeId = parentNode ? \"\".concat(parentNode[idProperty]) : undefined;\n        var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(itemId) : \"\".concat(itemId);\n        if (generateIdFromPath) {\n          item[idProperty] = path;\n        }\n        var idLength = (_id$split = id.split(pathSeparator)) === null || _id$split === void 0 ? void 0 : _id$split.length;\n        var idFromPath = path.split(pathSeparator).slice(0, idLength).join(pathSeparator);\n        if (idFromPath === id) {\n          var treeData = computedProps.dataMap ? computedProps.dataMap[path] : null;\n          if (!treeData) {\n            continue;\n          }\n          if (selected) {\n            clone[path] = treeData;\n          } else {\n            if (treeGridChildrenDeselectionEnabled) {\n              delete clone[path];\n            } else {\n              delete clone[id];\n            }\n          }\n        }\n        if (expandedNodes && expandedNodes[idFromPath]) {\n          if (Array.isArray(itemNodes)) {\n            treeGridChildrenSelection(itemNodes, id, selected, clone, treeGridChildrenDeselectionEnabled, item);\n          }\n        }\n      }\n    }\n    return clone;\n  };\n  var groupChildrenSelection = function groupChildrenSelection(_ref4) {\n    var clone = _ref4.clone,\n      id = _ref4.id,\n      selected = _ref4.selected,\n      dataMap = _ref4.dataMap,\n      idProperty = _ref4.idProperty;\n    if (!dataMap) {\n      return;\n    }\n    for (var key in dataMap) {\n      if (!key) {\n        break;\n      }\n      if (!key.includes(id)) {\n        continue;\n      }\n      var data = dataMap[key];\n      if (data.__group) {\n        if (selected) {\n          if (!clone[key]) {\n            clone[key] = data;\n          }\n        } else {\n          delete clone[key];\n        }\n        if (data.array && Array.isArray(data.array)) {\n          var _iterator = _createForOfIteratorHelper(data.array),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var item = _step.value;\n              var itemId = item[idProperty];\n              if (selected) {\n                if (!clone[itemId]) clone[itemId] = item;\n              } else {\n                delete clone[itemId];\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      } else {\n        var dataId = data[idProperty];\n        if (dataId === id) {\n          if (selected) {\n            if (!clone[id]) clone[id] = data;\n          } else {\n            delete clone[id];\n          }\n        }\n      }\n    }\n    return clone;\n  };\n  var setSelectedById = (0, _react.useCallback)(function (id, selected, queue) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var data = computedProps.dataMap ? computedProps.dataMap[id] : null;\n    if (!data) {\n      return;\n    }\n    var isSelected = computedProps.isRowSelected(data);\n    var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n    if (isSelected === selected) {\n      return;\n    }\n    if (multiSelect) {\n      var selectedMap = computedProps.computedSelected;\n      var unselectedMap = selectedMap === true ? computedProps.computedUnselected || {} : null;\n      var clone = selectedMap;\n      if (selectedMap === true) {\n        if (unselectedMap) {\n          unselectedMap = Object.assign({}, unselectedMap);\n        }\n        if (!selected && unselectedMap) {\n          unselectedMap[id] = true;\n          var totalCount = computedProps.paginationCount;\n          if (Object.keys(unselectedMap).length === totalCount) {\n            computedProps.deselectAll();\n            return;\n          }\n        } else {\n          if (unselectedMap) {\n            delete unselectedMap[id];\n          }\n          if (getUnselectedCountFromProps(computedProps, unselectedMap) === 0) {\n            unselectedMap = null;\n          }\n        }\n      } else {\n        clone = Object.assign({}, selectedMap);\n        if (computedProps.computedTreeEnabled && computedProps.treeGridChildrenSelectionEnabled) {\n          var originalData = JSON.stringify(computedProps.originalData || []);\n          var cloneOriginalData = (0, _toConsumableArray2.default)(JSON.parse(originalData));\n          var treeGridChildrenDeselectionEnabled = computedProps.treeGridChildrenDeselectionEnabled;\n          treeGridChildrenSelection(cloneOriginalData, id, selected, clone, treeGridChildrenDeselectionEnabled);\n        } else if (computedProps.groupColumn) {\n          groupChildrenSelection({\n            clone: clone,\n            id: id,\n            selected: selected,\n            dataMap: computedProps.dataMap,\n            idProperty: computedProps.idProperty\n          });\n        } else {\n          if (selected) {\n            clone[id] = data;\n          } else {\n            delete clone[id];\n          }\n        }\n      }\n      (0, _handleSelection.notifySelection)(computedProps, clone, data, unselectedMap, queue);\n    } else {\n      (0, _handleSelection.notifySelection)(computedProps, selected ? id : null, data, null, queue);\n    }\n  }, []);\n  return {\n    selectAll: selectAll,\n    deselectAll: deselectAll,\n    setRowSelected: setRowSelected,\n    setSelectedAt: setSelectedAt,\n    setSelectedById: setSelectedById,\n    setCellSelection: setCellSelection,\n    computedCellSelection: computedCellSelection,\n    computedCellSelectionEnabled: computedCellSelectionEnabled,\n    computedCellMultiSelectionEnabled: computedCellMultiSelectionEnabled,\n    computedCellNavigationEnabled: computedCellNavigationEnabled,\n    computedActiveCell: computedActiveCell,\n    getCellSelectionBetween: getCellSelectionBetween,\n    incrementActiveCell: incrementActiveCell,\n    cellDragStartRowIndex: cellDragStartRowIndex,\n    setCellDragStartRowIndex: setCellDragStartRowIndex,\n    onCellEnter: onCellEnter,\n    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,\n    toggleActiveCellSelection: toggleActiveCellSelection,\n    computedHasRowNavigation: computedHasRowNavigation,\n    computedRowSelectionEnabled: computedRowSelectionEnabled,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedSelected: computedSelected,\n    setSelected: setSelected,\n    computedUnselected: computedUnselected,\n    setUnselected: setUnselected,\n    isSelectionEmpty: isSelectionEmpty,\n    getSelectedMap: getSelectedMap,\n    getUnselectedMap: getUnselectedMap,\n    isRowSelected: isRowSelected,\n    getUnselectedCount: getUnselectedCount,\n    getSelectedCount: getSelectedCount,\n    computedUnselectedCount: computedUnselectedCount,\n    computedSelectedCount: computedSelectedCount,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey,\n    computedCellBulkUpdateMouseDown: computedCellBulkUpdateMouseDown,\n    computedCellBulkUpdateMouseUp: computedCellBulkUpdateMouseUp,\n    bulkUpdateMouseDown: bulkUpdateMouseDown\n  };\n};\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_toConsumableArray2","_defineProperty2","_typeof2","_slicedToArray2","_react","_useProperty5","_isSelectionEnabled","_isMultiSelect","_isSelectionControlled","_handleSelection","_batchUpdate","_usePrevious","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","EMPTY_OBJECT","getUnselectedFromProps","computedProps","computedUnselected","undefined","getUnselectedCountFromProps","unselected","computedRowSelectionEnabled","computedRowMultiSelectionEnabled","keys","getSelectedCountFromProps","selected","multiSelect","computedSelected","unselectedCount","paginationCount","useUnselected","props","_ref","_computedPropsRef","rowSelectionEnabled","rowMultiSelectionEnabled","_useProperty","_useProperty2","setUnselected","useSelected","_computedProps","computedPropsRef","_useProperty3","onChange","_ref2","arguments","silent","data","current","onSelectionChange","_useProperty4","setSelected","_default","_useSelected","previousRowMultiSelectionEnabled","useEffect","_useUnselected","computedSelectedCount","computedPagination","computedRemoteData","computedUnselectedCount","isSelectionEmpty","useCallback","selectionEmpty","getSelectedMap","getUnselected","getUnselectedMap","getUnselectedCount","getSelectedCount","isRowSelected","getItemAt","selectedMap","id","getItemId","unselectedMap","cellSelectionTmp","cellSelection","defaultCellSelection","activeCellDefined","activeCell","defaultActiveCell","computedHasRowNavigation","computedActiveIndex","enableKeyboardNavigation","_computedProps$useCel","useCellSelection","listenOnCellEnter","hasRowNavigation","computedCellSelection","setCellSelection","computedCellSelectionEnabled","cellSelectionEnabled","computedCellMultiSelectionEnabled","cellMultiSelectionEnabled","computedCellNavigationEnabled","cellNavigationEnabled","computedActiveCell","incrementActiveCell","getCellSelectionIdKey","getCellSelectionBetween","toggleActiveCellSelection","onCellEnter","setActiveCell","getCellSelectionKey","cellDragStartRowIndex","setCellDragStartRowIndex","onCellSelectionDraggerMouseDown","computedCellBulkUpdateMouseDown","bulkUpdateMouseDown","computedCellBulkUpdateMouseUp","selectAll","dataMap","computedGroupBy","map","d","computedTreeEnabled","stickyTreeNodes","vl","getVirtualList","updateStickyRows","force","notifySelection","deselectAll","setRowSelected","index","event","queue","checkboxSelectEnableShiftKey","target","shiftKey","metaKey","ctrlKey","rowProps","rowIndex","handleSelection","shiftKeyIndexRef","selectionIndexRef","setSelectedAt","commit","initialProps","setSelectedById","treeGridChildrenSelection","dataArray","clone","treeGridChildrenDeselectionEnabled","parentNode","idProperty","nodesName","nodesProperty","pathSeparator","nodePathSeparator","expandedNodes","computedExpandedNodes","generateIdFromPath","item","_id$split","itemId","itemNodes","parentNodeId","concat","path","idLength","split","idFromPath","join","treeData","groupChildrenSelection","_ref4","key","includes","__group","array","_iterator","_step","dataId","isSelected","assign","totalCount","treeGridChildrenSelectionEnabled","originalData","JSON","stringify","cloneOriginalData","parse","groupColumn"],"sources":["/Users/alexandre.nepomuceno/Documents/agenda/node_modules/@inovua/reactdatagrid-community/hooks/useSelection/index.js"],"sourcesContent":["/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _useProperty5 = _interopRequireDefault(require(\"../useProperty\"));\nvar _isSelectionEnabled = _interopRequireDefault(require(\"./isSelectionEnabled\"));\nvar _isMultiSelect = _interopRequireDefault(require(\"./isMultiSelect\"));\nvar _isSelectionControlled = _interopRequireDefault(require(\"./isSelectionControlled\"));\nvar _handleSelection = require(\"../useRow/handleSelection\");\nvar _batchUpdate = _interopRequireDefault(require(\"../../utils/batchUpdate\"));\nvar _usePrevious = _interopRequireDefault(require(\"../usePrevious\"));\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar EMPTY_OBJECT = {};\nvar getUnselectedFromProps = function getUnselectedFromProps(computedProps) {\n  if (!computedProps) {\n    return null;\n  }\n  if (computedProps.computedUnselected === undefined) {\n    return null;\n  }\n  return computedProps.computedUnselected;\n};\nvar getUnselectedCountFromProps = function getUnselectedCountFromProps(computedProps, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n  if (!computedProps.computedRowMultiSelectionEnabled) {\n    return 0;\n  }\n  unselected = unselected === undefined ? getUnselectedFromProps(computedProps) : unselected;\n  return unselected ? Object.keys(unselected).length : 0;\n};\nvar getSelectedCountFromProps = function getSelectedCountFromProps(computedProps, selected, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n  var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n  selected = selected === undefined ? computedProps.computedSelected : selected;\n  if (multiSelect && selected === true) {\n    var unselectedCount = getUnselectedCountFromProps(computedProps, unselected);\n    return computedProps.paginationCount - unselectedCount;\n  }\n  return multiSelect ? selected ? Object.keys(selected).length : 0 : !selected || Object.keys(selected).length === 0 ? 0 : 1;\n};\nvar useUnselected = function useUnselected(props, _ref, _computedPropsRef) {\n  var rowSelectionEnabled = _ref.rowSelectionEnabled,\n    rowMultiSelectionEnabled = _ref.rowMultiSelectionEnabled;\n  var _useProperty = (0, _useProperty5.default)(props, 'unselected'),\n    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n    unselected = _useProperty2[0],\n    setUnselected = _useProperty2[1];\n  if (!rowSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n  if (!rowMultiSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n  return {\n    unselected: unselected,\n    setUnselected: setUnselected\n  };\n};\nvar useSelected = function useSelected(props, _computedProps, computedPropsRef) {\n  var _useProperty3 = (0, _useProperty5.default)(props, 'selected', undefined, {\n      onChange: function onChange(selected) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          silent = _ref2.silent,\n          unselected = _ref2.unselected,\n          data = _ref2.data;\n        var computedProps = computedPropsRef.current;\n        if (props.onSelectionChange && !silent) {\n          props.onSelectionChange({\n            selected: selected,\n            data: data,\n            unselected: unselected !== undefined ? unselected : computedProps != null ? computedProps.computedUnselected : null\n          });\n        }\n      }\n    }),\n    _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n    selected = _useProperty4[0],\n    setSelected = _useProperty4[1];\n  var rowSelectionEnabled = (0, _isSelectionEnabled.default)(props);\n  var rowMultiSelectionEnabled = (0, _isMultiSelect.default)(props);\n  if (!rowSelectionEnabled) {\n    return {\n      selected: null,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n  if ((0, _isSelectionControlled.default)(props)) {\n    return {\n      selected: selected,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n  if (rowMultiSelectionEnabled && ((0, _typeof2.default)(selected) != 'object' || !selected) && selected !== true) {\n    selected = EMPTY_OBJECT;\n  }\n  return {\n    selected: selected,\n    setSelected: setSelected,\n    rowSelectionEnabled: rowSelectionEnabled,\n    rowMultiSelectionEnabled: rowMultiSelectionEnabled\n  };\n};\nvar _default = function _default(props, computedProps, computedPropsRef) {\n  var _useSelected = useSelected(props, computedProps, computedPropsRef),\n    computedSelected = _useSelected.selected,\n    setSelected = _useSelected.setSelected,\n    rowMultiSelectionEnabled = _useSelected.rowMultiSelectionEnabled,\n    rowSelectionEnabled = _useSelected.rowSelectionEnabled;\n  var previousRowMultiSelectionEnabled = (0, _usePrevious.default)(rowMultiSelectionEnabled, rowMultiSelectionEnabled);\n  (0, _react.useEffect)(function () {\n    if (previousRowMultiSelectionEnabled === true && rowMultiSelectionEnabled === false) {\n      setSelected({});\n    }\n  }, [previousRowMultiSelectionEnabled, rowMultiSelectionEnabled]);\n  var computedRowSelectionEnabled = rowSelectionEnabled;\n  var computedRowMultiSelectionEnabled = rowMultiSelectionEnabled;\n  var _useUnselected = useUnselected(props, {\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    }, computedPropsRef),\n    computedUnselected = _useUnselected.unselected,\n    setUnselected = _useUnselected.setUnselected;\n  var computedSelectedCount = getSelectedCountFromProps({\n    computedPagination: computedProps.computedPagination,\n    computedRemoteData: computedProps.computedRemoteData,\n    paginationCount: computedProps.paginationCount,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedSelected, computedUnselected);\n  var computedUnselectedCount = getUnselectedCountFromProps({\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedUnselected);\n  var isSelectionEmpty = (0, _react.useCallback)(function () {\n    var selected = computedSelected;\n    var selectionEmpty = false;\n    if (selected == null) {\n      selectionEmpty = true;\n    }\n    if ((0, _typeof2.default)(selected) === 'object' && selected !== null) {\n      selectionEmpty = Object.keys(selected).length === 0;\n    }\n    return selectionEmpty;\n  }, [computedSelected]);\n  var getSelectedMap = (0, _react.useCallback)(function () {\n    if (computedRowMultiSelectionEnabled) {\n      return computedSelected;\n    }\n    return (0, _defineProperty2.default)({}, computedSelected, true);\n  }, [computedRowMultiSelectionEnabled, computedSelected]);\n  var getUnselected = (0, _react.useCallback)(function () {\n    return getUnselectedFromProps(computedPropsRef.current);\n  }, []);\n  var getUnselectedMap = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return {};\n    }\n    var unselected = getUnselected();\n    if (computedProps.computedRowMultiSelectionEnabled) {\n      return unselected || {};\n    }\n    return {};\n  }, [getUnselected]);\n  var getUnselectedCount = function getUnselectedCount(unselected) {\n    return getUnselectedCountFromProps(computedPropsRef.current, unselected);\n  };\n  var getSelectedCount = function getSelectedCount(selected, unselected) {\n    return getSelectedCountFromProps(computedPropsRef.current, selected, unselected);\n  };\n  var isRowSelected = (0, _react.useCallback)(function (data) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return false;\n    }\n    if (typeof data == 'number') {\n      data = computedProps.getItemAt(data);\n    }\n    var selectedMap = getSelectedMap();\n    var id = computedProps.getItemId(data);\n    if (selectedMap === true) {\n      var unselectedMap = getUnselectedMap();\n      return !unselectedMap[id];\n    }\n    return !!selectedMap[id];\n  }, [getSelectedMap, getUnselectedMap]);\n  var cellSelectionTmp = props.cellSelection || props.defaultCellSelection;\n  var activeCellDefined = props.activeCell !== undefined || props.defaultActiveCell !== undefined;\n  var computedHasRowNavigation = (computedRowSelectionEnabled || !cellSelectionTmp) && computedProps.computedActiveIndex > -1 ? true : props.enableKeyboardNavigation !== false && !cellSelectionTmp && !activeCellDefined;\n  if (props.enableKeyboardNavigation === false) {\n    computedHasRowNavigation = false;\n  }\n  var _computedProps$useCel = computedProps.useCellSelection(props, {\n      rowSelectionEnabled: rowSelectionEnabled,\n      listenOnCellEnter: computedProps.listenOnCellEnter,\n      hasRowNavigation: computedHasRowNavigation\n    }, computedPropsRef),\n    computedCellSelection = _computedProps$useCel.computedCellSelection,\n    setCellSelection = _computedProps$useCel.setCellSelection,\n    computedCellSelectionEnabled = _computedProps$useCel.cellSelectionEnabled,\n    computedCellMultiSelectionEnabled = _computedProps$useCel.cellMultiSelectionEnabled,\n    computedCellNavigationEnabled = _computedProps$useCel.cellNavigationEnabled,\n    computedActiveCell = _computedProps$useCel.computedActiveCell,\n    incrementActiveCell = _computedProps$useCel.incrementActiveCell,\n    getCellSelectionIdKey = _computedProps$useCel.getCellSelectionIdKey,\n    getCellSelectionBetween = _computedProps$useCel.getCellSelectionBetween,\n    toggleActiveCellSelection = _computedProps$useCel.toggleActiveCellSelection,\n    onCellEnter = _computedProps$useCel.onCellEnter,\n    setActiveCell = _computedProps$useCel.setActiveCell,\n    getCellSelectionKey = _computedProps$useCel.getCellSelectionKey,\n    cellDragStartRowIndex = _computedProps$useCel.cellDragStartRowIndex,\n    setCellDragStartRowIndex = _computedProps$useCel.setCellDragStartRowIndex,\n    onCellSelectionDraggerMouseDown = _computedProps$useCel.onCellSelectionDraggerMouseDown,\n    computedCellBulkUpdateMouseDown = _computedProps$useCel.computedCellBulkUpdateMouseDown,\n    bulkUpdateMouseDown = _computedProps$useCel.bulkUpdateMouseDown,\n    computedCellBulkUpdateMouseUp = _computedProps$useCel.computedCellBulkUpdateMouseUp;\n  var selectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (!computedProps.computedRowSelectionEnabled) {\n      return;\n    }\n    var data = computedProps.data;\n    var dataMap = computedProps.dataMap;\n    if (computedProps.computedGroupBy) {\n      dataMap = {};\n      data = data.map(function (d) {\n        var id = computedProps.getItemId(d);\n        dataMap[id] = id;\n      });\n    }\n    if (computedProps.computedTreeEnabled && computedProps.stickyTreeNodes) {\n      var vl = computedProps.getVirtualList();\n      vl.updateStickyRows(undefined, undefined, {\n        force: true\n      });\n    }\n    (0, _handleSelection.notifySelection)(computedProps, computedProps.computedRemoteData || computedProps.computedPagination ? data.length === 0 ? false : true : dataMap, data, null);\n  }, []);\n  var deselectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (computedProps.computedTreeEnabled && computedProps.stickyTreeNodes) {\n      var vl = computedProps.getVirtualList();\n      vl.updateStickyRows(undefined, undefined, {\n        force: true\n      });\n    }\n    (0, _handleSelection.notifySelection)(computedProps, {}, [], null);\n  }, []);\n  var setRowSelected = (0, _react.useCallback)(function (index, selected, event) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var queue = (0, _batchUpdate.default)();\n    if (computedProps.checkboxSelectEnableShiftKey && computedProps.computedRowMultiSelectionEnabled) {\n      if (event && event.target) {\n        var shiftKey = event.shiftKey,\n          metaKey = event.metaKey,\n          ctrlKey = event.ctrlKey;\n        if (shiftKey) {\n          var rowProps = {\n            data: computedProps.getItemAt(index),\n            rowIndex: index\n          };\n          (0, _handleSelection.handleSelection)(rowProps, computedProps, {\n            shiftKey: shiftKey,\n            metaKey: metaKey,\n            ctrlKey: ctrlKey\n          }, queue);\n          return;\n        }\n        computedProps.shiftKeyIndexRef.current = index;\n        computedProps.selectionIndexRef.current = index;\n      }\n    }\n    computedProps.setSelectedAt(index, selected, queue);\n    queue.commit();\n  }, [computedProps.initialProps.checkboxSelectEnableShiftKey]);\n  var setSelectedAt = (0, _react.useCallback)(function (index, selected, queue) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var data = computedProps.data[index];\n    if (!data) {\n      return;\n    }\n    var id = computedProps.getItemId(data);\n    computedProps.setSelectedById(id, selected, queue);\n  }, []);\n  var treeGridChildrenSelection = function treeGridChildrenSelection(dataArray, id, selected, clone, treeGridChildrenDeselectionEnabled, parentNode) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var idProperty = computedProps.idProperty;\n    var nodesName = computedProps.nodesProperty;\n    var pathSeparator = computedProps.nodePathSeparator;\n    var expandedNodes = computedProps.computedExpandedNodes || EMPTY_OBJECT;\n    var generateIdFromPath = computedProps.generateIdFromPath;\n    for (var i = 0; i < dataArray.length; i++) {\n      var item = dataArray[i];\n      if (item) {\n        var _id$split;\n        var itemId = item[idProperty];\n        var itemNodes = item[nodesName];\n        var parentNodeId = parentNode ? \"\".concat(parentNode[idProperty]) : undefined;\n        var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(itemId) : \"\".concat(itemId);\n        if (generateIdFromPath) {\n          item[idProperty] = path;\n        }\n        var idLength = (_id$split = id.split(pathSeparator)) === null || _id$split === void 0 ? void 0 : _id$split.length;\n        var idFromPath = path.split(pathSeparator).slice(0, idLength).join(pathSeparator);\n        if (idFromPath === id) {\n          var treeData = computedProps.dataMap ? computedProps.dataMap[path] : null;\n          if (!treeData) {\n            continue;\n          }\n          if (selected) {\n            clone[path] = treeData;\n          } else {\n            if (treeGridChildrenDeselectionEnabled) {\n              delete clone[path];\n            } else {\n              delete clone[id];\n            }\n          }\n        }\n        if (expandedNodes && expandedNodes[idFromPath]) {\n          if (Array.isArray(itemNodes)) {\n            treeGridChildrenSelection(itemNodes, id, selected, clone, treeGridChildrenDeselectionEnabled, item);\n          }\n        }\n      }\n    }\n    return clone;\n  };\n  var groupChildrenSelection = function groupChildrenSelection(_ref4) {\n    var clone = _ref4.clone,\n      id = _ref4.id,\n      selected = _ref4.selected,\n      dataMap = _ref4.dataMap,\n      idProperty = _ref4.idProperty;\n    if (!dataMap) {\n      return;\n    }\n    for (var key in dataMap) {\n      if (!key) {\n        break;\n      }\n      if (!key.includes(id)) {\n        continue;\n      }\n      var data = dataMap[key];\n      if (data.__group) {\n        if (selected) {\n          if (!clone[key]) {\n            clone[key] = data;\n          }\n        } else {\n          delete clone[key];\n        }\n        if (data.array && Array.isArray(data.array)) {\n          var _iterator = _createForOfIteratorHelper(data.array),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var item = _step.value;\n              var itemId = item[idProperty];\n              if (selected) {\n                if (!clone[itemId]) clone[itemId] = item;\n              } else {\n                delete clone[itemId];\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      } else {\n        var dataId = data[idProperty];\n        if (dataId === id) {\n          if (selected) {\n            if (!clone[id]) clone[id] = data;\n          } else {\n            delete clone[id];\n          }\n        }\n      }\n    }\n    return clone;\n  };\n  var setSelectedById = (0, _react.useCallback)(function (id, selected, queue) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var data = computedProps.dataMap ? computedProps.dataMap[id] : null;\n    if (!data) {\n      return;\n    }\n    var isSelected = computedProps.isRowSelected(data);\n    var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n    if (isSelected === selected) {\n      return;\n    }\n    if (multiSelect) {\n      var selectedMap = computedProps.computedSelected;\n      var unselectedMap = selectedMap === true ? computedProps.computedUnselected || {} : null;\n      var clone = selectedMap;\n      if (selectedMap === true) {\n        if (unselectedMap) {\n          unselectedMap = Object.assign({}, unselectedMap);\n        }\n        if (!selected && unselectedMap) {\n          unselectedMap[id] = true;\n          var totalCount = computedProps.paginationCount;\n          if (Object.keys(unselectedMap).length === totalCount) {\n            computedProps.deselectAll();\n            return;\n          }\n        } else {\n          if (unselectedMap) {\n            delete unselectedMap[id];\n          }\n          if (getUnselectedCountFromProps(computedProps, unselectedMap) === 0) {\n            unselectedMap = null;\n          }\n        }\n      } else {\n        clone = Object.assign({}, selectedMap);\n        if (computedProps.computedTreeEnabled && computedProps.treeGridChildrenSelectionEnabled) {\n          var originalData = JSON.stringify(computedProps.originalData || []);\n          var cloneOriginalData = (0, _toConsumableArray2.default)(JSON.parse(originalData));\n          var treeGridChildrenDeselectionEnabled = computedProps.treeGridChildrenDeselectionEnabled;\n          treeGridChildrenSelection(cloneOriginalData, id, selected, clone, treeGridChildrenDeselectionEnabled);\n        } else if (computedProps.groupColumn) {\n          groupChildrenSelection({\n            clone: clone,\n            id: id,\n            selected: selected,\n            dataMap: computedProps.dataMap,\n            idProperty: computedProps.idProperty\n          });\n        } else {\n          if (selected) {\n            clone[id] = data;\n          } else {\n            delete clone[id];\n          }\n        }\n      }\n      (0, _handleSelection.notifySelection)(computedProps, clone, data, unselectedMap, queue);\n    } else {\n      (0, _handleSelection.notifySelection)(computedProps, selected ? id : null, data, null, queue);\n    }\n  }, []);\n  return {\n    selectAll: selectAll,\n    deselectAll: deselectAll,\n    setRowSelected: setRowSelected,\n    setSelectedAt: setSelectedAt,\n    setSelectedById: setSelectedById,\n    setCellSelection: setCellSelection,\n    computedCellSelection: computedCellSelection,\n    computedCellSelectionEnabled: computedCellSelectionEnabled,\n    computedCellMultiSelectionEnabled: computedCellMultiSelectionEnabled,\n    computedCellNavigationEnabled: computedCellNavigationEnabled,\n    computedActiveCell: computedActiveCell,\n    getCellSelectionBetween: getCellSelectionBetween,\n    incrementActiveCell: incrementActiveCell,\n    cellDragStartRowIndex: cellDragStartRowIndex,\n    setCellDragStartRowIndex: setCellDragStartRowIndex,\n    onCellEnter: onCellEnter,\n    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,\n    toggleActiveCellSelection: toggleActiveCellSelection,\n    computedHasRowNavigation: computedHasRowNavigation,\n    computedRowSelectionEnabled: computedRowSelectionEnabled,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedSelected: computedSelected,\n    setSelected: setSelected,\n    computedUnselected: computedUnselected,\n    setUnselected: setUnselected,\n    isSelectionEmpty: isSelectionEmpty,\n    getSelectedMap: getSelectedMap,\n    getUnselectedMap: getUnselectedMap,\n    isRowSelected: isRowSelected,\n    getUnselectedCount: getUnselectedCount,\n    getSelectedCount: getSelectedCount,\n    computedUnselectedCount: computedUnselectedCount,\n    computedSelectedCount: computedSelectedCount,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey,\n    computedCellBulkUpdateMouseDown: computedCellBulkUpdateMouseDown,\n    computedCellBulkUpdateMouseUp: computedCellBulkUpdateMouseUp,\n    bulkUpdateMouseDown: bulkUpdateMouseDown\n  };\n};\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}