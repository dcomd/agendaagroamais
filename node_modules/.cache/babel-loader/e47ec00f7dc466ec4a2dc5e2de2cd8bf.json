{"ast":null,"code":"/** \n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.countDecimalDigits = void 0;\nexports.default = getTransformedStringValues;\nexports.getDecimalDelimiterPosition = void 0;\nvar _getDecimalDelimiter = _interopRequireDefault(require(\"./get-decimal-delimiter\"));\nvar _getDigitGroupDelimiter = _interopRequireDefault(require(\"./get-digit-group-delimiter\"));\nvar _convertStringToNumber = _interopRequireDefault(require(\"./convert-string-to-number\"));\nvar getDecimalDelimiterPosition = function getDecimalDelimiterPosition(value, decimalDelimiter) {\n  var string = value && value.toString();\n  var position = string && string.indexOf(decimalDelimiter);\n  return position !== -1 ? position : false;\n};\nexports.getDecimalDelimiterPosition = getDecimalDelimiterPosition;\nvar countDecimalDigits = function countDecimalDigits(string, decimalDelimiter, decimalPosition) {\n  var position = decimalPosition || getDecimalDelimiterPosition(string, decimalDelimiter);\n  if (isNaN(position)) {\n    return 0;\n  }\n  if (typeof position === 'number' && position < string.length) {\n    return string.length - position - 1;\n  }\n  return 0;\n};\nexports.countDecimalDigits = countDecimalDigits;\nfunction getTransformedStringValues(stringInput) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var internalApi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof stringInput !== 'string') {\n    stringInput += '';\n  }\n  if (!stringInput) {\n    return ['', null];\n  }\n  stringInput = stringInput.replace(/[^0-9\\,\\.\\-\\+]/g, '');\n  if (stringInput === '-' || stringInput === '-.') {\n    return [stringInput, null];\n  }\n  var locale = props.locale,\n    _props$min = props.min,\n    min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n    _props$max = props.max,\n    max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max,\n    suffix = props.suffix,\n    prefix = props.prefix;\n  var precision = props.precision || null;\n  if (precision > 20) {\n    precision = 20;\n  }\n  var _internalApi$getDecim = internalApi.getDecimalDelimiter,\n    getDecimalDelimiter = _internalApi$getDecim === void 0 ? _getDecimalDelimiter.default : _internalApi$getDecim,\n    _internalApi$getDigit = internalApi.getDigitGroupDelimiter,\n    getDigitGroupDelimiter = _internalApi$getDigit === void 0 ? _getDigitGroupDelimiter.default : _internalApi$getDigit,\n    _internalApi$convertS = internalApi.convertStringToNumber,\n    convertStringToNumber = _internalApi$convertS === void 0 ? _convertStringToNumber.default : _internalApi$convertS;\n  var decimalDelimiter = getDecimalDelimiter(locale);\n  if (stringInput === decimalDelimiter) {\n    return [stringInput, null];\n  }\n  var decimalDelimiterPosition = getDecimalDelimiterPosition(stringInput, decimalDelimiter);\n  var decimalDigitsInInput = countDecimalDigits(stringInput, decimalDelimiter, decimalDelimiterPosition);\n  if (precision || precision === 0 && decimalDigitsInInput > precision) {\n    stringInput = stringInput.substring(0, stringInput.length - (decimalDigitsInInput - precision));\n  }\n  var digitGroupDelimiter = getDigitGroupDelimiter(locale);\n  var parsedResult = convertStringToNumber(stringInput, {\n    digitGroupDelimiter: digitGroupDelimiter,\n    decimalDelimiter: decimalDelimiter,\n    min: min,\n    max: max\n  });\n  if (isNaN(parsedResult)) {\n    return ['', null];\n  }\n  var numberWasClamped = parsedResult === min || parsedResult === max;\n  if (numberWasClamped) {\n    decimalDigitsInInput = 0;\n  }\n  var formatingOptions = {\n    maximumFractionDigits: precision ? Math.min(precision, 20) : 20,\n    minimumFractionDigits: Math.min(precision || decimalDigitsInInput, 20)\n  };\n  var stringRepresentation = parsedResult.toLocaleString(locale, formatingOptions);\n  if (!precision && !numberWasClamped && !decimalDigitsInInput && decimalDelimiterPosition === stringInput.length - 1) {\n    stringRepresentation += '.';\n  }\n  if (prefix) {\n    stringRepresentation = \"\".concat(prefix, \" \").concat(stringRepresentation);\n  }\n  if (suffix) {\n    stringRepresentation = \"\".concat(stringRepresentation, \" \").concat(suffix);\n  }\n  return [stringRepresentation, parsedResult];\n}","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","countDecimalDigits","default","getTransformedStringValues","getDecimalDelimiterPosition","_getDecimalDelimiter","_getDigitGroupDelimiter","_convertStringToNumber","decimalDelimiter","string","toString","position","indexOf","decimalPosition","isNaN","length","stringInput","props","arguments","undefined","internalApi","replace","locale","_props$min","min","Number","MIN_SAFE_INTEGER","_props$max","max","MAX_SAFE_INTEGER","suffix","prefix","precision","_internalApi$getDecim","getDecimalDelimiter","_internalApi$getDigit","getDigitGroupDelimiter","_internalApi$convertS","convertStringToNumber","decimalDelimiterPosition","decimalDigitsInInput","substring","digitGroupDelimiter","parsedResult","numberWasClamped","formatingOptions","maximumFractionDigits","Math","minimumFractionDigits","stringRepresentation","toLocaleString","concat"],"sources":["/Users/alexandre.nepomuceno/Documents/agenda/node_modules/@inovua/reactdatagrid-community/packages/NumericInput/src/utils/get-transformed-string-values.js"],"sourcesContent":["/** \n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.countDecimalDigits = void 0;\nexports.default = getTransformedStringValues;\nexports.getDecimalDelimiterPosition = void 0;\nvar _getDecimalDelimiter = _interopRequireDefault(require(\"./get-decimal-delimiter\"));\nvar _getDigitGroupDelimiter = _interopRequireDefault(require(\"./get-digit-group-delimiter\"));\nvar _convertStringToNumber = _interopRequireDefault(require(\"./convert-string-to-number\"));\nvar getDecimalDelimiterPosition = function getDecimalDelimiterPosition(value, decimalDelimiter) {\n  var string = value && value.toString();\n  var position = string && string.indexOf(decimalDelimiter);\n  return position !== -1 ? position : false;\n};\nexports.getDecimalDelimiterPosition = getDecimalDelimiterPosition;\nvar countDecimalDigits = function countDecimalDigits(string, decimalDelimiter, decimalPosition) {\n  var position = decimalPosition || getDecimalDelimiterPosition(string, decimalDelimiter);\n  if (isNaN(position)) {\n    return 0;\n  }\n  if (typeof position === 'number' && position < string.length) {\n    return string.length - position - 1;\n  }\n  return 0;\n};\nexports.countDecimalDigits = countDecimalDigits;\nfunction getTransformedStringValues(stringInput) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var internalApi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof stringInput !== 'string') {\n    stringInput += '';\n  }\n  if (!stringInput) {\n    return ['', null];\n  }\n  stringInput = stringInput.replace(/[^0-9\\,\\.\\-\\+]/g, '');\n  if (stringInput === '-' || stringInput === '-.') {\n    return [stringInput, null];\n  }\n  var locale = props.locale,\n    _props$min = props.min,\n    min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n    _props$max = props.max,\n    max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max,\n    suffix = props.suffix,\n    prefix = props.prefix;\n  var precision = props.precision || null;\n  if (precision > 20) {\n    precision = 20;\n  }\n  var _internalApi$getDecim = internalApi.getDecimalDelimiter,\n    getDecimalDelimiter = _internalApi$getDecim === void 0 ? _getDecimalDelimiter.default : _internalApi$getDecim,\n    _internalApi$getDigit = internalApi.getDigitGroupDelimiter,\n    getDigitGroupDelimiter = _internalApi$getDigit === void 0 ? _getDigitGroupDelimiter.default : _internalApi$getDigit,\n    _internalApi$convertS = internalApi.convertStringToNumber,\n    convertStringToNumber = _internalApi$convertS === void 0 ? _convertStringToNumber.default : _internalApi$convertS;\n  var decimalDelimiter = getDecimalDelimiter(locale);\n  if (stringInput === decimalDelimiter) {\n    return [stringInput, null];\n  }\n  var decimalDelimiterPosition = getDecimalDelimiterPosition(stringInput, decimalDelimiter);\n  var decimalDigitsInInput = countDecimalDigits(stringInput, decimalDelimiter, decimalDelimiterPosition);\n  if (precision || precision === 0 && decimalDigitsInInput > precision) {\n    stringInput = stringInput.substring(0, stringInput.length - (decimalDigitsInInput - precision));\n  }\n  var digitGroupDelimiter = getDigitGroupDelimiter(locale);\n  var parsedResult = convertStringToNumber(stringInput, {\n    digitGroupDelimiter: digitGroupDelimiter,\n    decimalDelimiter: decimalDelimiter,\n    min: min,\n    max: max\n  });\n  if (isNaN(parsedResult)) {\n    return ['', null];\n  }\n  var numberWasClamped = parsedResult === min || parsedResult === max;\n  if (numberWasClamped) {\n    decimalDigitsInInput = 0;\n  }\n  var formatingOptions = {\n    maximumFractionDigits: precision ? Math.min(precision, 20) : 20,\n    minimumFractionDigits: Math.min(precision || decimalDigitsInInput, 20)\n  };\n  var stringRepresentation = parsedResult.toLocaleString(locale, formatingOptions);\n  if (!precision && !numberWasClamped && !decimalDigitsInInput && decimalDelimiterPosition === stringInput.length - 1) {\n    stringRepresentation += '.';\n  }\n  if (prefix) {\n    stringRepresentation = \"\".concat(prefix, \" \").concat(stringRepresentation);\n  }\n  if (suffix) {\n    stringRepresentation = \"\".concat(stringRepresentation, \" \").concat(suffix);\n  }\n  return [stringRepresentation, parsedResult];\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}