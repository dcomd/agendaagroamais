{"ast":null,"code":"/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar onCopyClickHandle = function onCopyClickHandle(computedProps) {\n  if (!computedProps) {\n    return;\n  }\n  var cellSelection = !!computedProps.computedCellSelection;\n  var checkboxColumn = !!computedProps.checkboxColumn;\n  var selected = !!computedProps.computedSelected;\n  if (checkboxColumn || selected) {\n    computedProps.copySelectedRowsToClipboard();\n  } else if (cellSelection) {\n    computedProps.copySelectedCellsToClipboard();\n  } else {\n    computedProps.copyActiveRowToClipboard();\n  }\n};\nvar onPasteClickHandle = function onPasteClickHandle(computedProps) {\n  if (!computedProps) {\n    return;\n  }\n  var cellSelection = !!computedProps.computedCellSelection;\n  var checkboxColumn = !!computedProps.checkboxColumn;\n  var selected = !!computedProps.computedSelected;\n  if (checkboxColumn || selected) {\n    computedProps.pasteSelectedRowsFromClipboard();\n  } else if (cellSelection) {\n    computedProps.pasteSelectedCellsFromClipboard();\n  } else {\n    computedProps.pasteActiveRowFromClipboard();\n  }\n};\nvar pasteDisableHandle = function pasteDisableHandle(computedProps) {\n  var result = true;\n  if (computedProps.clipboard && computedProps.clipboard.current) {\n    result = false;\n  }\n  return result;\n};\nvar renderClipboardContextMenu = function renderClipboardContextMenu(menuProps, _ref) {\n  var computedProps = _ref.computedProps;\n  if (!computedProps) {\n    return;\n  }\n  if (!computedProps.enableClipboard) {\n    return null;\n  }\n  menuProps.autoDismiss = true;\n  menuProps.items = [{\n    label: 'Copy',\n    secondaryLabel: 'Ctrl/Cmd + C',\n    onClick: function onClick() {\n      return onCopyClickHandle(computedProps);\n    }\n  }, {\n    label: 'Paste',\n    secondaryLabel: 'Ctrl/Cmd + V',\n    onClick: function onClick() {\n      return onPasteClickHandle(computedProps);\n    },\n    disabled: pasteDisableHandle(computedProps)\n  }];\n};\nvar _default = renderClipboardContextMenu;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","onCopyClickHandle","computedProps","cellSelection","computedCellSelection","checkboxColumn","selected","computedSelected","copySelectedRowsToClipboard","copySelectedCellsToClipboard","copyActiveRowToClipboard","onPasteClickHandle","pasteSelectedRowsFromClipboard","pasteSelectedCellsFromClipboard","pasteActiveRowFromClipboard","pasteDisableHandle","result","clipboard","current","renderClipboardContextMenu","menuProps","_ref","enableClipboard","autoDismiss","items","label","secondaryLabel","onClick","disabled","_default"],"sources":["/Users/alexandre.nepomuceno/Documents/agendaagroamais/node_modules/@inovua/reactdatagrid-enterprise/plugins/clipboard/useClipboard/renderClipboardContextMenu.js"],"sourcesContent":["/**\n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar onCopyClickHandle = function onCopyClickHandle(computedProps) {\n  if (!computedProps) {\n    return;\n  }\n  var cellSelection = !!computedProps.computedCellSelection;\n  var checkboxColumn = !!computedProps.checkboxColumn;\n  var selected = !!computedProps.computedSelected;\n  if (checkboxColumn || selected) {\n    computedProps.copySelectedRowsToClipboard();\n  } else if (cellSelection) {\n    computedProps.copySelectedCellsToClipboard();\n  } else {\n    computedProps.copyActiveRowToClipboard();\n  }\n};\nvar onPasteClickHandle = function onPasteClickHandle(computedProps) {\n  if (!computedProps) {\n    return;\n  }\n  var cellSelection = !!computedProps.computedCellSelection;\n  var checkboxColumn = !!computedProps.checkboxColumn;\n  var selected = !!computedProps.computedSelected;\n  if (checkboxColumn || selected) {\n    computedProps.pasteSelectedRowsFromClipboard();\n  } else if (cellSelection) {\n    computedProps.pasteSelectedCellsFromClipboard();\n  } else {\n    computedProps.pasteActiveRowFromClipboard();\n  }\n};\nvar pasteDisableHandle = function pasteDisableHandle(computedProps) {\n  var result = true;\n  if (computedProps.clipboard && computedProps.clipboard.current) {\n    result = false;\n  }\n  return result;\n};\nvar renderClipboardContextMenu = function renderClipboardContextMenu(menuProps, _ref) {\n  var computedProps = _ref.computedProps;\n  if (!computedProps) {\n    return;\n  }\n  if (!computedProps.enableClipboard) {\n    return null;\n  }\n  menuProps.autoDismiss = true;\n  menuProps.items = [{\n    label: 'Copy',\n    secondaryLabel: 'Ctrl/Cmd + C',\n    onClick: function onClick() {\n      return onCopyClickHandle(computedProps);\n    }\n  }, {\n    label: 'Paste',\n    secondaryLabel: 'Ctrl/Cmd + V',\n    onClick: function onClick() {\n      return onPasteClickHandle(computedProps);\n    },\n    disabled: pasteDisableHandle(computedProps)\n  }];\n};\nvar _default = renderClipboardContextMenu;\nexports.default = _default;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,IAAIC,iBAAiB,GAAG,SAASA,iBAAiBA,CAACC,aAAa,EAAE;EAChE,IAAI,CAACA,aAAa,EAAE;IAClB;EACF;EACA,IAAIC,aAAa,GAAG,CAAC,CAACD,aAAa,CAACE,qBAAqB;EACzD,IAAIC,cAAc,GAAG,CAAC,CAACH,aAAa,CAACG,cAAc;EACnD,IAAIC,QAAQ,GAAG,CAAC,CAACJ,aAAa,CAACK,gBAAgB;EAC/C,IAAIF,cAAc,IAAIC,QAAQ,EAAE;IAC9BJ,aAAa,CAACM,2BAA2B,CAAC,CAAC;EAC7C,CAAC,MAAM,IAAIL,aAAa,EAAE;IACxBD,aAAa,CAACO,4BAA4B,CAAC,CAAC;EAC9C,CAAC,MAAM;IACLP,aAAa,CAACQ,wBAAwB,CAAC,CAAC;EAC1C;AACF,CAAC;AACD,IAAIC,kBAAkB,GAAG,SAASA,kBAAkBA,CAACT,aAAa,EAAE;EAClE,IAAI,CAACA,aAAa,EAAE;IAClB;EACF;EACA,IAAIC,aAAa,GAAG,CAAC,CAACD,aAAa,CAACE,qBAAqB;EACzD,IAAIC,cAAc,GAAG,CAAC,CAACH,aAAa,CAACG,cAAc;EACnD,IAAIC,QAAQ,GAAG,CAAC,CAACJ,aAAa,CAACK,gBAAgB;EAC/C,IAAIF,cAAc,IAAIC,QAAQ,EAAE;IAC9BJ,aAAa,CAACU,8BAA8B,CAAC,CAAC;EAChD,CAAC,MAAM,IAAIT,aAAa,EAAE;IACxBD,aAAa,CAACW,+BAA+B,CAAC,CAAC;EACjD,CAAC,MAAM;IACLX,aAAa,CAACY,2BAA2B,CAAC,CAAC;EAC7C;AACF,CAAC;AACD,IAAIC,kBAAkB,GAAG,SAASA,kBAAkBA,CAACb,aAAa,EAAE;EAClE,IAAIc,MAAM,GAAG,IAAI;EACjB,IAAId,aAAa,CAACe,SAAS,IAAIf,aAAa,CAACe,SAAS,CAACC,OAAO,EAAE;IAC9DF,MAAM,GAAG,KAAK;EAChB;EACA,OAAOA,MAAM;AACf,CAAC;AACD,IAAIG,0BAA0B,GAAG,SAASA,0BAA0BA,CAACC,SAAS,EAAEC,IAAI,EAAE;EACpF,IAAInB,aAAa,GAAGmB,IAAI,CAACnB,aAAa;EACtC,IAAI,CAACA,aAAa,EAAE;IAClB;EACF;EACA,IAAI,CAACA,aAAa,CAACoB,eAAe,EAAE;IAClC,OAAO,IAAI;EACb;EACAF,SAAS,CAACG,WAAW,GAAG,IAAI;EAC5BH,SAAS,CAACI,KAAK,GAAG,CAAC;IACjBC,KAAK,EAAE,MAAM;IACbC,cAAc,EAAE,cAAc;IAC9BC,OAAO,EAAE,SAASA,OAAOA,CAAA,EAAG;MAC1B,OAAO1B,iBAAiB,CAACC,aAAa,CAAC;IACzC;EACF,CAAC,EAAE;IACDuB,KAAK,EAAE,OAAO;IACdC,cAAc,EAAE,cAAc;IAC9BC,OAAO,EAAE,SAASA,OAAOA,CAAA,EAAG;MAC1B,OAAOhB,kBAAkB,CAACT,aAAa,CAAC;IAC1C,CAAC;IACD0B,QAAQ,EAAEb,kBAAkB,CAACb,aAAa;EAC5C,CAAC,CAAC;AACJ,CAAC;AACD,IAAI2B,QAAQ,GAAGV,0BAA0B;AACzCrB,OAAO,CAACE,OAAO,GAAG6B,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}