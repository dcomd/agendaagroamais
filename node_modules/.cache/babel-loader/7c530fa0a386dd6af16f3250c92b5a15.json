{"ast":null,"code":"/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClipboard = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _renderClipboardContextMenu = _interopRequireDefault(require(\"./renderClipboardContextMenu\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar ROW_SEPARATOR = '\\n';\nvar getClipboardSeparator = function getClipboardSeparator(computedProps) {\n  var clipboardSeparator = computedProps.clipboardSeparator || '\\t';\n  if (clipboardSeparator === ROW_SEPARATOR) {\n    clipboardSeparator = '\\t';\n  }\n  return clipboardSeparator;\n};\nvar getCopySelectedCells = function getCopySelectedCells(rows) {\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '\\t';\n  var data = [];\n  Object.keys(rows).map(function (r) {\n    var row = rows[r];\n    var newRow = [];\n    Object.keys(row).map(function (key) {\n      var cell = row[key];\n      newRow.push(cell);\n    });\n    var stringRow = newRow.join(separator);\n    data.push(stringRow);\n  });\n  return data.join(ROW_SEPARATOR);\n};\nvar getPasteSelectedCellsDataFromCsv = function getPasteSelectedCellsDataFromCsv(data, computedProps) {\n  var clipboardSeparator = getClipboardSeparator(computedProps);\n  var _computedProps$comput = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),\n    activeRow = _computedProps$comput[0],\n    activeColumn = _computedProps$comput[1];\n  var rows = data.split(ROW_SEPARATOR);\n  var newData = [];\n  var dataArray = rows.map(function (r, i) {\n    var row = {};\n    var cells = r.split(clipboardSeparator);\n    cells.map(function (c, j) {\n      var column = computedProps.getColumnBy(activeColumn + j);\n      if (column) {\n        var enableClipboardForEditableCellsOnly = computedProps.enableClipboardForEditableCellsOnly;\n        var shouldReplaceValue = enableClipboardForEditableCellsOnly ? column.computedEditable : true;\n        var id = column.id;\n        var computedColumn = shouldReplaceValue ? (0, _defineProperty2.default)({}, id, c) : undefined;\n        row[i] = Object.assign({}, row[i], computedColumn);\n      }\n    });\n    newData.push(row[i]);\n    var newIndex = activeRow + i;\n    var newId = computedProps.getItemIdAt(newIndex);\n    return Object.assign({}, _objectSpread({\n      id: newId\n    }, row[i]));\n  });\n  return dataArray;\n};\nvar getPasteSelectedCellsData = function getPasteSelectedCellsData(data, computedProps) {\n  var parsedData = JSON.parse(data);\n  var _computedProps$comput2 = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),\n    activeRow = _computedProps$comput2[0],\n    activeColumn = _computedProps$comput2[1];\n  var dataArray = Object.keys(parsedData).map(function (key, index) {\n    var columns = {};\n    var row = parsedData[key];\n    Object.keys(row).map(function (columnKey, i) {\n      var column = computedProps.getColumnBy(activeColumn + i);\n      if (column) {\n        var enableClipboardForEditableCellsOnly = computedProps.enableClipboardForEditableCellsOnly;\n        var shouldReplaceValue = enableClipboardForEditableCellsOnly ? column.computedEditable : true;\n        var id = column.id;\n        var computedColumn = shouldReplaceValue ? (0, _defineProperty2.default)({}, id, row[columnKey]) : undefined;\n        columns[index] = Object.assign({}, columns[index], computedColumn);\n      }\n    });\n    var newIndex = activeRow + index;\n    var newId = computedProps.getItemIdAt(newIndex);\n    return Object.assign({}, _objectSpread({\n      id: newId\n    }, columns[index]));\n  });\n  return dataArray;\n};\nvar useClipboard = function useClipboard(_props, computedProps, computedPropsRef) {\n  var clipboard = (0, _react.useRef)(false);\n  var preventBlurOnContextMenuOpen = (0, _react.useRef)(false);\n  if (!computedProps.enableClipboard) {\n    return null;\n  }\n  var copySelectedRowsToClipboard = function copySelectedRowsToClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) return null;\n    if (computedProps.checkboxColumn || computedProps.computedSelected) {\n      var selectedRows = computedProps.computedSelected;\n      if (selectedRows) {\n        var rows = Object.keys(selectedRows).map(function (row) {\n          return selectedRows[row];\n        });\n        var clonedRows = Object.assign({}, rows);\n        if (computedProps.onCopySelectedRowsChange) {\n          computedProps.onCopySelectedRowsChange(clonedRows);\n        }\n        var parsedSelectedRows = JSON.stringify(rows);\n        navigator.clipboard.writeText(parsedSelectedRows).then(function () {\n          if (Object.keys(clonedRows).length > 0) {\n            clipboard.current = true;\n          }\n        }).catch(function (e) {\n          return console.warn(e);\n        });\n      }\n    }\n  };\n  var pasteSelectedRowsFromClipboard = function pasteSelectedRowsFromClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (computedProps.checkboxColumn || computedProps.computedSelected) {\n      if (navigator.clipboard) {\n        navigator.clipboard.readText().then(function (data) {\n          var parsedData = JSON.parse(data);\n          if (!Array.isArray(parsedData)) return;\n          var activeIndex = computedProps.computedActiveIndex;\n          var newData = parsedData.map(function (item, index) {\n            var newItem = computedProps.getItemAt(activeIndex + index);\n            var itemId = computedProps.getItemId(newItem);\n            return _objectSpread(_objectSpread({}, item), {}, {\n              id: itemId\n            });\n          }, []);\n          if (computedProps.onPasteSelectedRowsChange) {\n            computedProps.onPasteSelectedRowsChange(newData);\n          }\n          if (activeIndex != null) {\n            computedProps.setItemsAt(newData, {\n              replace: false\n            });\n          }\n        });\n      }\n    }\n  };\n  var copyActiveRowToClipboard = function copyActiveRowToClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (computedProps.computedCellSelection) {\n      return null;\n    }\n    var activeRow = computedProps.getActiveItem();\n    if (computedProps.onCopyActiveRowChange) {\n      computedProps.onCopyActiveRowChange(activeRow);\n    }\n    var idProperty = computedProps.idProperty;\n    var compoundIdProperty = idProperty.includes(computedProps.idPropertySeparator);\n    if (activeRow && navigator.clipboard) {\n      var clonedActiveRow = Object.assign({}, activeRow);\n      if (compoundIdProperty) {\n        var activeRowId = computedProps.getItemId(clonedActiveRow);\n        var parts = idProperty.split(computedProps.idPropertySeparator);\n        parts.reduce(function (itemObj, id) {\n          if (activeRowId === itemObj[id]) {\n            if (itemObj) {\n              delete itemObj[id];\n            }\n          }\n          return itemObj[id];\n        }, clonedActiveRow);\n      } else {\n        delete clonedActiveRow[idProperty];\n      }\n      var parsedActiveRow = JSON.stringify(clonedActiveRow);\n      navigator.clipboard.writeText(parsedActiveRow).then(function () {\n        if (Object.keys(clonedActiveRow).length > 0) {\n          clipboard.current = true;\n        }\n      }).catch(function (e) {\n        return console.warn(e);\n      });\n    }\n  };\n  var pasteActiveRowFromClipboard = function pasteActiveRowFromClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (computedProps.computedCellSelection) {\n      return null;\n    }\n    if (navigator.clipboard) {\n      navigator.clipboard.readText().then(function (data) {\n        var parsedData = JSON.parse(data);\n        var activeIndex = computedProps.computedActiveIndex;\n        if (computedProps.onPasteActiveRowChange) {\n          computedProps.onPasteActiveRowChange(parsedData);\n        }\n        if (activeIndex != null) {\n          computedProps.setItemAt(activeIndex, parsedData, {\n            replace: false,\n            deepCloning: true\n          });\n        }\n      });\n    }\n  };\n  var copySelectedCellsToClipboard = function copySelectedCellsToClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (!computedProps.computedCellSelection) {\n      return null;\n    }\n    var selectedCells = computedProps.computedCellSelection;\n    var data = computedProps.getData();\n    var rows = {};\n    Object.keys(selectedCells).map(function (key) {\n      var parsedKey = key.split(',');\n      var id = parsedKey[0];\n      var column = parsedKey[1];\n      var index = computedProps.getItemIndexById(id);\n      if (index !== undefined && column !== undefined) {\n        var cellValue = data[index][column];\n        rows[index] = Object.assign({}, rows[index], (0, _defineProperty2.default)({}, column, cellValue));\n      }\n    });\n    if (computedProps.onCopySelectedCellsChange) {\n      computedProps.onCopySelectedCellsChange(rows);\n    }\n    if (!!rows && navigator.clipboard) {\n      var parsedSelectedCells = '';\n      if (computedProps.copySpreadsheetCompatibleString) {\n        var clipboardSeparator = getClipboardSeparator(computedProps);\n        parsedSelectedCells = getCopySelectedCells(rows, clipboardSeparator);\n      } else {\n        parsedSelectedCells = JSON.stringify(rows);\n      }\n      navigator.clipboard.writeText(parsedSelectedCells).then(function () {\n        if (Object.keys(rows).length > 0) {\n          clipboard.current = true;\n        }\n      }).catch(function (e) {\n        return console.warn(e);\n      });\n    }\n  };\n  var pasteSelectedCellsFromClipboard = function pasteSelectedCellsFromClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (!computedProps.computedCellSelection) {\n      return null;\n    }\n    if (navigator.clipboard) {\n      navigator.clipboard.readText().then(function (data) {\n        var dataArray = [];\n        if (computedProps.copySpreadsheetCompatibleString) {\n          dataArray = getPasteSelectedCellsDataFromCsv(data, computedProps) || [];\n        } else {\n          dataArray = getPasteSelectedCellsData(data, computedProps) || [];\n        }\n        if (computedProps.onPasteSelectedCellsChange) {\n          computedProps.onPasteSelectedCellsChange(dataArray);\n        }\n        computedProps.setItemsAt(dataArray, {\n          replace: false\n        });\n      });\n    }\n  };\n  var clipboardContextMenu = function clipboardContextMenu() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (computedProps.renderRowContextMenu) {\n      return;\n    }\n    computedProps.initialProps.renderRowContextMenu = _renderClipboardContextMenu.default;\n  };\n  clipboardContextMenu();\n  return {\n    copyActiveRowToClipboard: copyActiveRowToClipboard,\n    pasteActiveRowFromClipboard: pasteActiveRowFromClipboard,\n    copySelectedCellsToClipboard: copySelectedCellsToClipboard,\n    pasteSelectedCellsFromClipboard: pasteSelectedCellsFromClipboard,\n    copySelectedRowsToClipboard: copySelectedRowsToClipboard,\n    pasteSelectedRowsFromClipboard: pasteSelectedRowsFromClipboard,\n    clipboard: clipboard,\n    preventBlurOnContextMenuOpen: preventBlurOnContextMenuOpen\n  };\n};\nexports.useClipboard = useClipboard;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","useClipboard","_defineProperty2","_slicedToArray2","_react","_renderClipboardContextMenu","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","default","getOwnPropertyDescriptors","defineProperties","ROW_SEPARATOR","getClipboardSeparator","computedProps","clipboardSeparator","getCopySelectedCells","rows","separator","undefined","data","map","r","row","newRow","cell","stringRow","join","getPasteSelectedCellsDataFromCsv","_computedProps$comput","computedActiveCell","activeRow","activeColumn","split","newData","dataArray","cells","c","j","column","getColumnBy","enableClipboardForEditableCellsOnly","shouldReplaceValue","computedEditable","id","computedColumn","assign","newIndex","newId","getItemIdAt","getPasteSelectedCellsData","parsedData","JSON","parse","_computedProps$comput2","index","columns","columnKey","_props","computedPropsRef","clipboard","useRef","preventBlurOnContextMenuOpen","enableClipboard","copySelectedRowsToClipboard","current","checkboxColumn","computedSelected","selectedRows","clonedRows","onCopySelectedRowsChange","parsedSelectedRows","stringify","navigator","writeText","then","catch","e","console","warn","pasteSelectedRowsFromClipboard","readText","Array","isArray","activeIndex","computedActiveIndex","item","newItem","getItemAt","itemId","getItemId","onPasteSelectedRowsChange","setItemsAt","replace","copyActiveRowToClipboard","computedCellSelection","getActiveItem","onCopyActiveRowChange","idProperty","compoundIdProperty","includes","idPropertySeparator","clonedActiveRow","activeRowId","parts","reduce","itemObj","parsedActiveRow","pasteActiveRowFromClipboard","onPasteActiveRowChange","setItemAt","deepCloning","copySelectedCellsToClipboard","selectedCells","getData","parsedKey","getItemIndexById","cellValue","onCopySelectedCellsChange","parsedSelectedCells","copySpreadsheetCompatibleString","pasteSelectedCellsFromClipboard","onPasteSelectedCellsChange","clipboardContextMenu","renderRowContextMenu","initialProps"],"sources":["/Users/alexandre.nepomuceno/Documents/agendaagroamais/node_modules/@inovua/reactdatagrid-enterprise/plugins/clipboard/useClipboard/index.js"],"sourcesContent":["/**\n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the Commercial License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useClipboard = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _renderClipboardContextMenu = _interopRequireDefault(require(\"./renderClipboardContextMenu\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar ROW_SEPARATOR = '\\n';\nvar getClipboardSeparator = function getClipboardSeparator(computedProps) {\n  var clipboardSeparator = computedProps.clipboardSeparator || '\\t';\n  if (clipboardSeparator === ROW_SEPARATOR) {\n    clipboardSeparator = '\\t';\n  }\n  return clipboardSeparator;\n};\nvar getCopySelectedCells = function getCopySelectedCells(rows) {\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '\\t';\n  var data = [];\n  Object.keys(rows).map(function (r) {\n    var row = rows[r];\n    var newRow = [];\n    Object.keys(row).map(function (key) {\n      var cell = row[key];\n      newRow.push(cell);\n    });\n    var stringRow = newRow.join(separator);\n    data.push(stringRow);\n  });\n  return data.join(ROW_SEPARATOR);\n};\nvar getPasteSelectedCellsDataFromCsv = function getPasteSelectedCellsDataFromCsv(data, computedProps) {\n  var clipboardSeparator = getClipboardSeparator(computedProps);\n  var _computedProps$comput = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),\n    activeRow = _computedProps$comput[0],\n    activeColumn = _computedProps$comput[1];\n  var rows = data.split(ROW_SEPARATOR);\n  var newData = [];\n  var dataArray = rows.map(function (r, i) {\n    var row = {};\n    var cells = r.split(clipboardSeparator);\n    cells.map(function (c, j) {\n      var column = computedProps.getColumnBy(activeColumn + j);\n      if (column) {\n        var enableClipboardForEditableCellsOnly = computedProps.enableClipboardForEditableCellsOnly;\n        var shouldReplaceValue = enableClipboardForEditableCellsOnly ? column.computedEditable : true;\n        var id = column.id;\n        var computedColumn = shouldReplaceValue ? (0, _defineProperty2.default)({}, id, c) : undefined;\n        row[i] = Object.assign({}, row[i], computedColumn);\n      }\n    });\n    newData.push(row[i]);\n    var newIndex = activeRow + i;\n    var newId = computedProps.getItemIdAt(newIndex);\n    return Object.assign({}, _objectSpread({\n      id: newId\n    }, row[i]));\n  });\n  return dataArray;\n};\nvar getPasteSelectedCellsData = function getPasteSelectedCellsData(data, computedProps) {\n  var parsedData = JSON.parse(data);\n  var _computedProps$comput2 = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),\n    activeRow = _computedProps$comput2[0],\n    activeColumn = _computedProps$comput2[1];\n  var dataArray = Object.keys(parsedData).map(function (key, index) {\n    var columns = {};\n    var row = parsedData[key];\n    Object.keys(row).map(function (columnKey, i) {\n      var column = computedProps.getColumnBy(activeColumn + i);\n      if (column) {\n        var enableClipboardForEditableCellsOnly = computedProps.enableClipboardForEditableCellsOnly;\n        var shouldReplaceValue = enableClipboardForEditableCellsOnly ? column.computedEditable : true;\n        var id = column.id;\n        var computedColumn = shouldReplaceValue ? (0, _defineProperty2.default)({}, id, row[columnKey]) : undefined;\n        columns[index] = Object.assign({}, columns[index], computedColumn);\n      }\n    });\n    var newIndex = activeRow + index;\n    var newId = computedProps.getItemIdAt(newIndex);\n    return Object.assign({}, _objectSpread({\n      id: newId\n    }, columns[index]));\n  });\n  return dataArray;\n};\nvar useClipboard = function useClipboard(_props, computedProps, computedPropsRef) {\n  var clipboard = (0, _react.useRef)(false);\n  var preventBlurOnContextMenuOpen = (0, _react.useRef)(false);\n  if (!computedProps.enableClipboard) {\n    return null;\n  }\n  var copySelectedRowsToClipboard = function copySelectedRowsToClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) return null;\n    if (computedProps.checkboxColumn || computedProps.computedSelected) {\n      var selectedRows = computedProps.computedSelected;\n      if (selectedRows) {\n        var rows = Object.keys(selectedRows).map(function (row) {\n          return selectedRows[row];\n        });\n        var clonedRows = Object.assign({}, rows);\n        if (computedProps.onCopySelectedRowsChange) {\n          computedProps.onCopySelectedRowsChange(clonedRows);\n        }\n        var parsedSelectedRows = JSON.stringify(rows);\n        navigator.clipboard.writeText(parsedSelectedRows).then(function () {\n          if (Object.keys(clonedRows).length > 0) {\n            clipboard.current = true;\n          }\n        }).catch(function (e) {\n          return console.warn(e);\n        });\n      }\n    }\n  };\n  var pasteSelectedRowsFromClipboard = function pasteSelectedRowsFromClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (computedProps.checkboxColumn || computedProps.computedSelected) {\n      if (navigator.clipboard) {\n        navigator.clipboard.readText().then(function (data) {\n          var parsedData = JSON.parse(data);\n          if (!Array.isArray(parsedData)) return;\n          var activeIndex = computedProps.computedActiveIndex;\n          var newData = parsedData.map(function (item, index) {\n            var newItem = computedProps.getItemAt(activeIndex + index);\n            var itemId = computedProps.getItemId(newItem);\n            return _objectSpread(_objectSpread({}, item), {}, {\n              id: itemId\n            });\n          }, []);\n          if (computedProps.onPasteSelectedRowsChange) {\n            computedProps.onPasteSelectedRowsChange(newData);\n          }\n          if (activeIndex != null) {\n            computedProps.setItemsAt(newData, {\n              replace: false\n            });\n          }\n        });\n      }\n    }\n  };\n  var copyActiveRowToClipboard = function copyActiveRowToClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (computedProps.computedCellSelection) {\n      return null;\n    }\n    var activeRow = computedProps.getActiveItem();\n    if (computedProps.onCopyActiveRowChange) {\n      computedProps.onCopyActiveRowChange(activeRow);\n    }\n    var idProperty = computedProps.idProperty;\n    var compoundIdProperty = idProperty.includes(computedProps.idPropertySeparator);\n    if (activeRow && navigator.clipboard) {\n      var clonedActiveRow = Object.assign({}, activeRow);\n      if (compoundIdProperty) {\n        var activeRowId = computedProps.getItemId(clonedActiveRow);\n        var parts = idProperty.split(computedProps.idPropertySeparator);\n        parts.reduce(function (itemObj, id) {\n          if (activeRowId === itemObj[id]) {\n            if (itemObj) {\n              delete itemObj[id];\n            }\n          }\n          return itemObj[id];\n        }, clonedActiveRow);\n      } else {\n        delete clonedActiveRow[idProperty];\n      }\n      var parsedActiveRow = JSON.stringify(clonedActiveRow);\n      navigator.clipboard.writeText(parsedActiveRow).then(function () {\n        if (Object.keys(clonedActiveRow).length > 0) {\n          clipboard.current = true;\n        }\n      }).catch(function (e) {\n        return console.warn(e);\n      });\n    }\n  };\n  var pasteActiveRowFromClipboard = function pasteActiveRowFromClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (computedProps.computedCellSelection) {\n      return null;\n    }\n    if (navigator.clipboard) {\n      navigator.clipboard.readText().then(function (data) {\n        var parsedData = JSON.parse(data);\n        var activeIndex = computedProps.computedActiveIndex;\n        if (computedProps.onPasteActiveRowChange) {\n          computedProps.onPasteActiveRowChange(parsedData);\n        }\n        if (activeIndex != null) {\n          computedProps.setItemAt(activeIndex, parsedData, {\n            replace: false,\n            deepCloning: true\n          });\n        }\n      });\n    }\n  };\n  var copySelectedCellsToClipboard = function copySelectedCellsToClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (!computedProps.computedCellSelection) {\n      return null;\n    }\n    var selectedCells = computedProps.computedCellSelection;\n    var data = computedProps.getData();\n    var rows = {};\n    Object.keys(selectedCells).map(function (key) {\n      var parsedKey = key.split(',');\n      var id = parsedKey[0];\n      var column = parsedKey[1];\n      var index = computedProps.getItemIndexById(id);\n      if (index !== undefined && column !== undefined) {\n        var cellValue = data[index][column];\n        rows[index] = Object.assign({}, rows[index], (0, _defineProperty2.default)({}, column, cellValue));\n      }\n    });\n    if (computedProps.onCopySelectedCellsChange) {\n      computedProps.onCopySelectedCellsChange(rows);\n    }\n    if (!!rows && navigator.clipboard) {\n      var parsedSelectedCells = '';\n      if (computedProps.copySpreadsheetCompatibleString) {\n        var clipboardSeparator = getClipboardSeparator(computedProps);\n        parsedSelectedCells = getCopySelectedCells(rows, clipboardSeparator);\n      } else {\n        parsedSelectedCells = JSON.stringify(rows);\n      }\n      navigator.clipboard.writeText(parsedSelectedCells).then(function () {\n        if (Object.keys(rows).length > 0) {\n          clipboard.current = true;\n        }\n      }).catch(function (e) {\n        return console.warn(e);\n      });\n    }\n  };\n  var pasteSelectedCellsFromClipboard = function pasteSelectedCellsFromClipboard() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (!computedProps.computedCellSelection) {\n      return null;\n    }\n    if (navigator.clipboard) {\n      navigator.clipboard.readText().then(function (data) {\n        var dataArray = [];\n        if (computedProps.copySpreadsheetCompatibleString) {\n          dataArray = getPasteSelectedCellsDataFromCsv(data, computedProps) || [];\n        } else {\n          dataArray = getPasteSelectedCellsData(data, computedProps) || [];\n        }\n        if (computedProps.onPasteSelectedCellsChange) {\n          computedProps.onPasteSelectedCellsChange(dataArray);\n        }\n        computedProps.setItemsAt(dataArray, {\n          replace: false\n        });\n      });\n    }\n  };\n  var clipboardContextMenu = function clipboardContextMenu() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return null;\n    }\n    if (computedProps.renderRowContextMenu) {\n      return;\n    }\n    computedProps.initialProps.renderRowContextMenu = _renderClipboardContextMenu.default;\n  };\n  clipboardContextMenu();\n  return {\n    copyActiveRowToClipboard: copyActiveRowToClipboard,\n    pasteActiveRowFromClipboard: pasteActiveRowFromClipboard,\n    copySelectedCellsToClipboard: copySelectedCellsToClipboard,\n    pasteSelectedCellsFromClipboard: pasteSelectedCellsFromClipboard,\n    copySelectedRowsToClipboard: copySelectedRowsToClipboard,\n    pasteSelectedRowsFromClipboard: pasteSelectedRowsFromClipboard,\n    clipboard: clipboard,\n    preventBlurOnContextMenuOpen: preventBlurOnContextMenuOpen\n  };\n};\nexports.useClipboard = useClipboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}