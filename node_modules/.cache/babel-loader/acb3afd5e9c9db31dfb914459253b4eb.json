{"ast":null,"code":"/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _getScrollbarWidth = _interopRequireDefault(require(\"../packages/getScrollbarWidth\"));\nvar _defaultCheckColumnId = require(\"../normalizeColumns/defaultCheckColumnId\");\nvar _defaultRowReorderColumnId = require(\"../normalizeColumns/defaultRowReorderColumnId\");\nvar _defaultRowIndexColumnId = require(\"../normalizeColumns/defaultRowIndexColumnId\");\nvar _defaultRowExpandColumnId = require(\"../normalizeColumns/defaultRowExpandColumnId\");\nvar EMPTY_OBJECT = {};\nvar removeItemFromArray = function removeItemFromArray(array, obj) {\n  var index = array.indexOf(obj);\n  if (index >= 0) {\n    array.splice(index, 1);\n  }\n};\nvar getColumnsWidths = function getColumnsWidths(columns) {\n  return columns.reduce(function (width, column) {\n    return width + column.computedWidth;\n  }, 0);\n};\nvar checkForSpecialColumns = function checkForSpecialColumns(id) {\n  var specialColumns = [_defaultCheckColumnId.id, _defaultRowReorderColumnId.id, _defaultRowIndexColumnId.id, _defaultRowExpandColumnId.id];\n  if (specialColumns.indexOf(id) === -1) {\n    return false;\n  }\n  return true;\n};\nvar useColumnsSizing = function useColumnsSizing(_props, _computedProps, computedPropsRef) {\n  var computeColumnSizesToFit = function computeColumnSizesToFit(gridWidth) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var visibleColumns = computedProps.visibleColumns;\n    if (gridWidth <= 0 || !visibleColumns.length) {\n      return;\n    }\n    var columnsToSize = [];\n    var columnsNotToSize = [];\n    visibleColumns.forEach(function (column) {\n      if (column.resizable === false) {\n        columnsNotToSize.push(column);\n      } else {\n        columnsToSize.push(column);\n      }\n    });\n    var columnsToResize = columnsToSize.slice(0);\n    var finished = false;\n    var updateColumnsNotToSize = function updateColumnsNotToSize(column) {\n      removeItemFromArray(columnsToResize, column);\n      columnsNotToSize.push(column);\n    };\n    var newColumnSizes = {};\n    while (!finished) {\n      finished = true;\n      var availableSpace = gridWidth - getColumnsWidths(columnsNotToSize);\n      var scale = availableSpace / getColumnsWidths(columnsToResize);\n      var spaceForLastColumn = availableSpace;\n      for (var i = columnsToResize.length - 1; i >= 0; i--) {\n        var column = columnsToResize[i];\n        var minWidth = column.computedMinWidth;\n        var maxWidth = column.computedMaxWidth;\n        var newWidth = Math.round(column.computedWidth * scale);\n        if (minWidth && newWidth < minWidth) {\n          newWidth = minWidth;\n          updateColumnsNotToSize(column);\n          finished = false;\n        } else if (maxWidth && newWidth > maxWidth) {\n          newWidth = maxWidth;\n          updateColumnsNotToSize(column);\n          finished = false;\n        } else if (i === 0) {\n          newWidth = spaceForLastColumn;\n        }\n        var columnId = column.id;\n        Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));\n        spaceForLastColumn -= newWidth;\n      }\n    }\n    if (computedProps.virtualizeColumns) {\n      var bodyRef = computedProps.bodyRef.current;\n      var columnLayout = bodyRef.columnLayout;\n      var headerLayout = columnLayout.headerLayout;\n      var header = headerLayout.header;\n      setTimeout(function () {\n        header.updateColumns();\n      }, 10);\n    }\n    var newReservedViewportWidth = computedProps.reservedViewportWidth;\n    var columnFlexes = computedProps.columnFlexes;\n    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {\n      getColumnBy: computedProps.getColumnBy,\n      onColumnResize: computedProps.initialProps.onColumnResize,\n      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,\n      columnSizes: computedProps.columnSizes,\n      setColumnSizes: computedProps.setColumnSizes,\n      setColumnFlexes: computedProps.setColumnFlexes\n    });\n  };\n  var checkForAvaibleWidth = function checkForAvaibleWidth() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var scrollbars = computedProps.scrollbars;\n    var hasVerticalScrollbar = scrollbars.vertical;\n    var scrollbarWidth = hasVerticalScrollbar ? (0, _getScrollbarWidth.default)() : 0;\n    var computedAvailableWidth = computedProps.availableWidth || 0;\n    var availableWidth = computedAvailableWidth - scrollbarWidth;\n    if (availableWidth > 0) {\n      computeColumnSizesToFit(availableWidth);\n    }\n  };\n  var computeColumnSizesAuto = function computeColumnSizesAuto(columns, callback) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (!columns.length) {\n      return;\n    }\n    columns.forEach(function (column) {\n      if (column.resizable === false || checkForSpecialColumns(column.id)) {} else {\n        callback(column);\n      }\n    });\n  };\n  var getCellForColumn = function getCellForColumn(column, row) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var result;\n    var columnId = column.id;\n    var cells = row.getCells();\n    if (!cells.length) {\n      return;\n    }\n    cells.forEach(function (cell) {\n      var cellProps = cell.props;\n      var cellId = cellProps.id;\n      if (columnId === cellId) {\n        result = cell.domRef ? cell.domRef.current : cell.getDOMNode ? cell.getDOMNode() : null;\n      }\n    });\n    return result;\n  };\n  var getCellsForColumn = function getCellsForColumn(column) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var result = [];\n    if (computedProps.getRows) {\n      computedProps.getRows().forEach(function (rowInstance) {\n        var row = rowInstance.row;\n        var cell = getCellForColumn(column, row);\n        result.push(cell);\n      });\n    }\n    return result;\n  };\n  var cloneIntoDummyContainer = function cloneIntoDummyContainer(cell, dummyContainer, skipSortTool) {\n    var cellClone = cell && cell.cloneNode(true);\n    if (!cellClone) {\n      return;\n    }\n    cellClone.style.width = '';\n    cellClone.style.minWidth = '';\n    cellClone.style.maxWidth = '';\n    cellClone.style.position = 'static';\n    cellClone.style.left = '';\n    var rowClassName = 'InovuaReactDataGrid__row';\n    var headerClassName = 'InovuaReactDataGrid__header';\n    var headerCellClassName = 'InovuaReactDataGrid__column-header';\n    var sortToolClassName = 'InovuaReactDataGrid__sort-icon-wrapper';\n    var isHeader = cellClone.classList.contains(headerCellClassName);\n    var cellContent;\n    cellContent = (0, _toConsumableArray2.default)(cellClone.children).find(function (cell) {\n      var className = isHeader ? 'InovuaReactDataGrid__column-header__content' : 'InovuaReactDataGrid__cell__content';\n      return cell.classList.contains(className);\n    });\n    if (isHeader && skipSortTool) {\n      var sortTool = cellContent.querySelector(\".\".concat(sortToolClassName));\n      if (sortTool) {\n        cellContent = cellContent.removeChild(sortTool);\n      }\n    }\n    if (cellContent) {\n      cellContent.style.width = 'fit-content';\n    } else {\n      cellClone.style.width = 'fit-content';\n    }\n    var cloneRow = document.createElement('div');\n    var cloneRowClassList = cloneRow.classList;\n    if (isHeader) {\n      cloneRowClassList.add(headerClassName);\n      cloneRow.style.position = 'static';\n    } else {\n      cloneRowClassList.add(rowClassName);\n    }\n    var rowElement = cell.parentElement;\n    while (rowElement) {\n      var isRow = [rowClassName, headerClassName].some(function (cls) {\n        return rowElement.classList.contains(cls);\n      });\n      if (isRow) {\n        for (var i = 0; i < rowElement.classList.length; i++) {\n          var item = rowElement.classList[i];\n          cloneRowClassList.add(item);\n        }\n        break;\n      }\n      rowElement = rowElement.parentElement;\n    }\n    cloneRow.appendChild(cellClone);\n    dummyContainer.appendChild(cloneRow);\n  };\n  var computeOptimizedWidth = function computeOptimizedWidth(column, skipHeader, skipSortTool) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return -1;\n    }\n    var cells = getCellsForColumn(column);\n    if (!cells || !cells.length) {\n      return -1;\n    }\n    if (!skipHeader) {\n      var headerCell;\n      var header = computedProps.getHeader();\n      var headerCells = header.getCells();\n      headerCells.find(function (cell) {\n        var cellProps = cell.props;\n        if (cellProps.id === column.id) {\n          headerCell = cell.getDOMNode();\n        }\n      });\n      if (headerCell && headerCell.classList.contains('InovuaReactDataGrid__column-header__resize-wrapper')) {\n        headerCell = (0, _toConsumableArray2.default)(headerCell.children).find(function (cell) {\n          return cell.classList.contains('InovuaReactDataGrid__column-header');\n        });\n      }\n      cells.push(headerCell);\n    }\n    return addCellsToContainer(cells, skipHeader, skipSortTool);\n  };\n  var addCellsToContainer = function addCellsToContainer(cells, skipHeader, skipSortTool) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return -1;\n    }\n    var dummyContainer = document.createElement('span');\n    dummyContainer.style.position = 'fixed';\n    var vl = computedProps.getVirtualList();\n    var container = vl.getContainerNode();\n    container.appendChild(dummyContainer);\n    (0, _toConsumableArray2.default)(cells).map(function (cell) {\n      return cloneIntoDummyContainer(cell, dummyContainer, skipSortTool);\n    });\n    var dummyContainerWidth = dummyContainer.offsetWidth;\n    if (!skipHeader) {\n      dummyContainerWidth += 3;\n    } else {\n      dummyContainerWidth += 1;\n    }\n    container.removeChild(dummyContainer);\n    return dummyContainerWidth;\n  };\n  var normaliseWidth = function normaliseWidth(column, width) {\n    var minWidth = column.minWidth;\n    var maxWidth = column.maxWidth;\n    if (minWidth && width < minWidth) {\n      width = minWidth;\n    }\n    if (maxWidth && width > maxWidth) {\n      width = maxWidth;\n    }\n    return width;\n  };\n  var setColumnSizesToFit = function setColumnSizesToFit() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n    if (!enableColumnAutosize) {\n      showWarning('setColumnSizesToFit');\n      return;\n    }\n    checkForAvaibleWidth();\n  };\n  var setColumnsSizesAuto = function setColumnsSizesAuto() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_OBJECT,\n      columnIds = _ref.columnIds,\n      skipHeader = _ref.skipHeader,\n      skipSortTool = _ref.skipSortTool;\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n    if (!enableColumnAutosize) {\n      showWarning('setColumnsSizesAuto');\n      return;\n    }\n    var shouldSkipHeader = skipHeader != null ? skipHeader : computedProps.skipHeaderOnAutoSize;\n    var shouldSkipSortTool = skipSortTool != null ? skipSortTool : false;\n    var allIds = [];\n    var columns = [];\n    if (columnIds !== undefined) {\n      if (Array.isArray(columnIds)) {\n        allIds = columnIds;\n      }\n    }\n    for (var i = 0; i < allIds.length; i++) {\n      var id = allIds[i];\n      var column = computedProps.getColumnBy(id);\n      columns.push(column);\n    }\n    if (columns && columns.length === 0) {\n      columns = computedProps.visibleColumns;\n    }\n    if (!columns || columns.length === 0) {\n      return;\n    }\n    var columnsToSize = [];\n    var counter = -1;\n    var newColumnSizes = {};\n    while (counter !== 0) {\n      counter = 0;\n      computeColumnSizesAuto(columns, function (column) {\n        if (columnsToSize.indexOf(column) >= 0) {\n          return false;\n        }\n        var optimizedWidth = computeOptimizedWidth(column, shouldSkipHeader, shouldSkipSortTool);\n        if (optimizedWidth > 0) {\n          var newWidth = normaliseWidth(column, optimizedWidth);\n          var columnId = column.id;\n          columnsToSize.push(column);\n          Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));\n          counter++;\n        }\n        return true;\n      });\n    }\n    if (computedProps.virtualizeColumns) {\n      var bodyRef = computedProps.bodyRef.current;\n      var columnLayout = bodyRef.columnLayout;\n      var headerLayout = columnLayout.headerLayout;\n      var header = headerLayout.header;\n      setTimeout(function () {\n        header.updateColumns();\n      }, 10);\n    }\n    var newReservedViewportWidth = computedProps.reservedViewportWidth;\n    var columnFlexes = computedProps.columnFlexes;\n    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {\n      getColumnBy: computedProps.getColumnBy,\n      onColumnResize: computedProps.initialProps.onColumnResize,\n      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,\n      columnSizes: computedProps.columnSizes,\n      setColumnSizes: computedProps.setColumnSizes,\n      setColumnFlexes: computedProps.setColumnFlexes\n    });\n  };\n  var setColumnSizeAuto = function setColumnSizeAuto(id, skipHeader) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n    if (!enableColumnAutosize) {\n      showWarning('setColumnSizeAuto');\n      return;\n    }\n    if (id) {\n      setColumnsSizesAuto({\n        columnIds: [id],\n        skipHeader: skipHeader\n      });\n    }\n    return;\n  };\n  var showWarning = function showWarning(method) {\n    return console.error(\"In order for \".concat(method, \" to work, the 'enableColumnAutosize' prop should be 'true'.\"));\n  };\n  return {\n    setColumnSizesToFit: setColumnSizesToFit,\n    setColumnsSizesAuto: setColumnsSizesAuto,\n    setColumnSizeAuto: setColumnSizeAuto\n  };\n};\nvar _default = useColumnsSizing;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_toConsumableArray2","_defineProperty2","_getScrollbarWidth","_defaultCheckColumnId","_defaultRowReorderColumnId","_defaultRowIndexColumnId","_defaultRowExpandColumnId","EMPTY_OBJECT","removeItemFromArray","array","obj","index","indexOf","splice","getColumnsWidths","columns","reduce","width","column","computedWidth","checkForSpecialColumns","id","specialColumns","useColumnsSizing","_props","_computedProps","computedPropsRef","computeColumnSizesToFit","gridWidth","computedProps","current","visibleColumns","length","columnsToSize","columnsNotToSize","forEach","resizable","push","columnsToResize","slice","finished","updateColumnsNotToSize","newColumnSizes","availableSpace","scale","spaceForLastColumn","i","minWidth","computedMinWidth","maxWidth","computedMaxWidth","newWidth","Math","round","columnId","assign","virtualizeColumns","bodyRef","columnLayout","headerLayout","header","setTimeout","updateColumns","newReservedViewportWidth","reservedViewportWidth","columnFlexes","computeColumnSizes","getColumnBy","onColumnResize","initialProps","onBatchColumnResize","columnSizes","setColumnSizes","setColumnFlexes","checkForAvaibleWidth","scrollbars","hasVerticalScrollbar","vertical","scrollbarWidth","computedAvailableWidth","availableWidth","computeColumnSizesAuto","callback","getCellForColumn","row","result","cells","getCells","cell","cellProps","props","cellId","domRef","getDOMNode","getCellsForColumn","getRows","rowInstance","cloneIntoDummyContainer","dummyContainer","skipSortTool","cellClone","cloneNode","style","position","left","rowClassName","headerClassName","headerCellClassName","sortToolClassName","isHeader","classList","contains","cellContent","children","find","className","sortTool","querySelector","concat","removeChild","cloneRow","document","createElement","cloneRowClassList","add","rowElement","parentElement","isRow","some","cls","item","appendChild","computeOptimizedWidth","skipHeader","headerCell","getHeader","headerCells","addCellsToContainer","vl","getVirtualList","container","getContainerNode","map","dummyContainerWidth","offsetWidth","normaliseWidth","setColumnSizesToFit","enableColumnAutosize","showWarning","setColumnsSizesAuto","_ref","arguments","undefined","columnIds","shouldSkipHeader","skipHeaderOnAutoSize","shouldSkipSortTool","allIds","Array","isArray","counter","optimizedWidth","setColumnSizeAuto","method","console","error","_default"],"sources":["/Users/alexandre.nepomuceno/Documents/agendaagroamais/node_modules/@inovua/reactdatagrid-community/hooks/useColumnsSizing.js"],"sourcesContent":["/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _getScrollbarWidth = _interopRequireDefault(require(\"../packages/getScrollbarWidth\"));\nvar _defaultCheckColumnId = require(\"../normalizeColumns/defaultCheckColumnId\");\nvar _defaultRowReorderColumnId = require(\"../normalizeColumns/defaultRowReorderColumnId\");\nvar _defaultRowIndexColumnId = require(\"../normalizeColumns/defaultRowIndexColumnId\");\nvar _defaultRowExpandColumnId = require(\"../normalizeColumns/defaultRowExpandColumnId\");\nvar EMPTY_OBJECT = {};\nvar removeItemFromArray = function removeItemFromArray(array, obj) {\n  var index = array.indexOf(obj);\n  if (index >= 0) {\n    array.splice(index, 1);\n  }\n};\nvar getColumnsWidths = function getColumnsWidths(columns) {\n  return columns.reduce(function (width, column) {\n    return width + column.computedWidth;\n  }, 0);\n};\nvar checkForSpecialColumns = function checkForSpecialColumns(id) {\n  var specialColumns = [_defaultCheckColumnId.id, _defaultRowReorderColumnId.id, _defaultRowIndexColumnId.id, _defaultRowExpandColumnId.id];\n  if (specialColumns.indexOf(id) === -1) {\n    return false;\n  }\n  return true;\n};\nvar useColumnsSizing = function useColumnsSizing(_props, _computedProps, computedPropsRef) {\n  var computeColumnSizesToFit = function computeColumnSizesToFit(gridWidth) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var visibleColumns = computedProps.visibleColumns;\n    if (gridWidth <= 0 || !visibleColumns.length) {\n      return;\n    }\n    var columnsToSize = [];\n    var columnsNotToSize = [];\n    visibleColumns.forEach(function (column) {\n      if (column.resizable === false) {\n        columnsNotToSize.push(column);\n      } else {\n        columnsToSize.push(column);\n      }\n    });\n    var columnsToResize = columnsToSize.slice(0);\n    var finished = false;\n    var updateColumnsNotToSize = function updateColumnsNotToSize(column) {\n      removeItemFromArray(columnsToResize, column);\n      columnsNotToSize.push(column);\n    };\n    var newColumnSizes = {};\n    while (!finished) {\n      finished = true;\n      var availableSpace = gridWidth - getColumnsWidths(columnsNotToSize);\n      var scale = availableSpace / getColumnsWidths(columnsToResize);\n      var spaceForLastColumn = availableSpace;\n      for (var i = columnsToResize.length - 1; i >= 0; i--) {\n        var column = columnsToResize[i];\n        var minWidth = column.computedMinWidth;\n        var maxWidth = column.computedMaxWidth;\n        var newWidth = Math.round(column.computedWidth * scale);\n        if (minWidth && newWidth < minWidth) {\n          newWidth = minWidth;\n          updateColumnsNotToSize(column);\n          finished = false;\n        } else if (maxWidth && newWidth > maxWidth) {\n          newWidth = maxWidth;\n          updateColumnsNotToSize(column);\n          finished = false;\n        } else if (i === 0) {\n          newWidth = spaceForLastColumn;\n        }\n        var columnId = column.id;\n        Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));\n        spaceForLastColumn -= newWidth;\n      }\n    }\n    if (computedProps.virtualizeColumns) {\n      var bodyRef = computedProps.bodyRef.current;\n      var columnLayout = bodyRef.columnLayout;\n      var headerLayout = columnLayout.headerLayout;\n      var header = headerLayout.header;\n      setTimeout(function () {\n        header.updateColumns();\n      }, 10);\n    }\n    var newReservedViewportWidth = computedProps.reservedViewportWidth;\n    var columnFlexes = computedProps.columnFlexes;\n    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {\n      getColumnBy: computedProps.getColumnBy,\n      onColumnResize: computedProps.initialProps.onColumnResize,\n      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,\n      columnSizes: computedProps.columnSizes,\n      setColumnSizes: computedProps.setColumnSizes,\n      setColumnFlexes: computedProps.setColumnFlexes\n    });\n  };\n  var checkForAvaibleWidth = function checkForAvaibleWidth() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var scrollbars = computedProps.scrollbars;\n    var hasVerticalScrollbar = scrollbars.vertical;\n    var scrollbarWidth = hasVerticalScrollbar ? (0, _getScrollbarWidth.default)() : 0;\n    var computedAvailableWidth = computedProps.availableWidth || 0;\n    var availableWidth = computedAvailableWidth - scrollbarWidth;\n    if (availableWidth > 0) {\n      computeColumnSizesToFit(availableWidth);\n    }\n  };\n  var computeColumnSizesAuto = function computeColumnSizesAuto(columns, callback) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (!columns.length) {\n      return;\n    }\n    columns.forEach(function (column) {\n      if (column.resizable === false || checkForSpecialColumns(column.id)) {} else {\n        callback(column);\n      }\n    });\n  };\n  var getCellForColumn = function getCellForColumn(column, row) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var result;\n    var columnId = column.id;\n    var cells = row.getCells();\n    if (!cells.length) {\n      return;\n    }\n    cells.forEach(function (cell) {\n      var cellProps = cell.props;\n      var cellId = cellProps.id;\n      if (columnId === cellId) {\n        result = cell.domRef ? cell.domRef.current : cell.getDOMNode ? cell.getDOMNode() : null;\n      }\n    });\n    return result;\n  };\n  var getCellsForColumn = function getCellsForColumn(column) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var result = [];\n    if (computedProps.getRows) {\n      computedProps.getRows().forEach(function (rowInstance) {\n        var row = rowInstance.row;\n        var cell = getCellForColumn(column, row);\n        result.push(cell);\n      });\n    }\n    return result;\n  };\n  var cloneIntoDummyContainer = function cloneIntoDummyContainer(cell, dummyContainer, skipSortTool) {\n    var cellClone = cell && cell.cloneNode(true);\n    if (!cellClone) {\n      return;\n    }\n    cellClone.style.width = '';\n    cellClone.style.minWidth = '';\n    cellClone.style.maxWidth = '';\n    cellClone.style.position = 'static';\n    cellClone.style.left = '';\n    var rowClassName = 'InovuaReactDataGrid__row';\n    var headerClassName = 'InovuaReactDataGrid__header';\n    var headerCellClassName = 'InovuaReactDataGrid__column-header';\n    var sortToolClassName = 'InovuaReactDataGrid__sort-icon-wrapper';\n    var isHeader = cellClone.classList.contains(headerCellClassName);\n    var cellContent;\n    cellContent = (0, _toConsumableArray2.default)(cellClone.children).find(function (cell) {\n      var className = isHeader ? 'InovuaReactDataGrid__column-header__content' : 'InovuaReactDataGrid__cell__content';\n      return cell.classList.contains(className);\n    });\n    if (isHeader && skipSortTool) {\n      var sortTool = cellContent.querySelector(\".\".concat(sortToolClassName));\n      if (sortTool) {\n        cellContent = cellContent.removeChild(sortTool);\n      }\n    }\n    if (cellContent) {\n      cellContent.style.width = 'fit-content';\n    } else {\n      cellClone.style.width = 'fit-content';\n    }\n    var cloneRow = document.createElement('div');\n    var cloneRowClassList = cloneRow.classList;\n    if (isHeader) {\n      cloneRowClassList.add(headerClassName);\n      cloneRow.style.position = 'static';\n    } else {\n      cloneRowClassList.add(rowClassName);\n    }\n    var rowElement = cell.parentElement;\n    while (rowElement) {\n      var isRow = [rowClassName, headerClassName].some(function (cls) {\n        return rowElement.classList.contains(cls);\n      });\n      if (isRow) {\n        for (var i = 0; i < rowElement.classList.length; i++) {\n          var item = rowElement.classList[i];\n          cloneRowClassList.add(item);\n        }\n        break;\n      }\n      rowElement = rowElement.parentElement;\n    }\n    cloneRow.appendChild(cellClone);\n    dummyContainer.appendChild(cloneRow);\n  };\n  var computeOptimizedWidth = function computeOptimizedWidth(column, skipHeader, skipSortTool) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return -1;\n    }\n    var cells = getCellsForColumn(column);\n    if (!cells || !cells.length) {\n      return -1;\n    }\n    if (!skipHeader) {\n      var headerCell;\n      var header = computedProps.getHeader();\n      var headerCells = header.getCells();\n      headerCells.find(function (cell) {\n        var cellProps = cell.props;\n        if (cellProps.id === column.id) {\n          headerCell = cell.getDOMNode();\n        }\n      });\n      if (headerCell && headerCell.classList.contains('InovuaReactDataGrid__column-header__resize-wrapper')) {\n        headerCell = (0, _toConsumableArray2.default)(headerCell.children).find(function (cell) {\n          return cell.classList.contains('InovuaReactDataGrid__column-header');\n        });\n      }\n      cells.push(headerCell);\n    }\n    return addCellsToContainer(cells, skipHeader, skipSortTool);\n  };\n  var addCellsToContainer = function addCellsToContainer(cells, skipHeader, skipSortTool) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return -1;\n    }\n    var dummyContainer = document.createElement('span');\n    dummyContainer.style.position = 'fixed';\n    var vl = computedProps.getVirtualList();\n    var container = vl.getContainerNode();\n    container.appendChild(dummyContainer);\n    (0, _toConsumableArray2.default)(cells).map(function (cell) {\n      return cloneIntoDummyContainer(cell, dummyContainer, skipSortTool);\n    });\n    var dummyContainerWidth = dummyContainer.offsetWidth;\n    if (!skipHeader) {\n      dummyContainerWidth += 3;\n    } else {\n      dummyContainerWidth += 1;\n    }\n    container.removeChild(dummyContainer);\n    return dummyContainerWidth;\n  };\n  var normaliseWidth = function normaliseWidth(column, width) {\n    var minWidth = column.minWidth;\n    var maxWidth = column.maxWidth;\n    if (minWidth && width < minWidth) {\n      width = minWidth;\n    }\n    if (maxWidth && width > maxWidth) {\n      width = maxWidth;\n    }\n    return width;\n  };\n  var setColumnSizesToFit = function setColumnSizesToFit() {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n    if (!enableColumnAutosize) {\n      showWarning('setColumnSizesToFit');\n      return;\n    }\n    checkForAvaibleWidth();\n  };\n  var setColumnsSizesAuto = function setColumnsSizesAuto() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_OBJECT,\n      columnIds = _ref.columnIds,\n      skipHeader = _ref.skipHeader,\n      skipSortTool = _ref.skipSortTool;\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n    if (!enableColumnAutosize) {\n      showWarning('setColumnsSizesAuto');\n      return;\n    }\n    var shouldSkipHeader = skipHeader != null ? skipHeader : computedProps.skipHeaderOnAutoSize;\n    var shouldSkipSortTool = skipSortTool != null ? skipSortTool : false;\n    var allIds = [];\n    var columns = [];\n    if (columnIds !== undefined) {\n      if (Array.isArray(columnIds)) {\n        allIds = columnIds;\n      }\n    }\n    for (var i = 0; i < allIds.length; i++) {\n      var id = allIds[i];\n      var column = computedProps.getColumnBy(id);\n      columns.push(column);\n    }\n    if (columns && columns.length === 0) {\n      columns = computedProps.visibleColumns;\n    }\n    if (!columns || columns.length === 0) {\n      return;\n    }\n    var columnsToSize = [];\n    var counter = -1;\n    var newColumnSizes = {};\n    while (counter !== 0) {\n      counter = 0;\n      computeColumnSizesAuto(columns, function (column) {\n        if (columnsToSize.indexOf(column) >= 0) {\n          return false;\n        }\n        var optimizedWidth = computeOptimizedWidth(column, shouldSkipHeader, shouldSkipSortTool);\n        if (optimizedWidth > 0) {\n          var newWidth = normaliseWidth(column, optimizedWidth);\n          var columnId = column.id;\n          columnsToSize.push(column);\n          Object.assign(newColumnSizes, (0, _defineProperty2.default)({}, columnId, newWidth));\n          counter++;\n        }\n        return true;\n      });\n    }\n    if (computedProps.virtualizeColumns) {\n      var bodyRef = computedProps.bodyRef.current;\n      var columnLayout = bodyRef.columnLayout;\n      var headerLayout = columnLayout.headerLayout;\n      var header = headerLayout.header;\n      setTimeout(function () {\n        header.updateColumns();\n      }, 10);\n    }\n    var newReservedViewportWidth = computedProps.reservedViewportWidth;\n    var columnFlexes = computedProps.columnFlexes;\n    computedProps.computeColumnSizes(newColumnSizes || {}, columnFlexes || {}, newReservedViewportWidth, {\n      getColumnBy: computedProps.getColumnBy,\n      onColumnResize: computedProps.initialProps.onColumnResize,\n      onBatchColumnResize: computedProps.initialProps.onBatchColumnResize,\n      columnSizes: computedProps.columnSizes,\n      setColumnSizes: computedProps.setColumnSizes,\n      setColumnFlexes: computedProps.setColumnFlexes\n    });\n  };\n  var setColumnSizeAuto = function setColumnSizeAuto(id, skipHeader) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var enableColumnAutosize = computedProps.enableColumnAutosize;\n    if (!enableColumnAutosize) {\n      showWarning('setColumnSizeAuto');\n      return;\n    }\n    if (id) {\n      setColumnsSizesAuto({\n        columnIds: [id],\n        skipHeader: skipHeader\n      });\n    }\n    return;\n  };\n  var showWarning = function showWarning(method) {\n    return console.error(\"In order for \".concat(method, \" to work, the 'enableColumnAutosize' prop should be 'true'.\"));\n  };\n  return {\n    setColumnSizesToFit: setColumnSizesToFit,\n    setColumnsSizesAuto: setColumnsSizesAuto,\n    setColumnSizeAuto: setColumnSizeAuto\n  };\n};\nvar _default = useColumnsSizing;\nexports.default = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}