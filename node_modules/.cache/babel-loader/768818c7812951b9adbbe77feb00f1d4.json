{"ast":null,"code":"/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _clamp = _interopRequireDefault(require(\"../clamp\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar normalize = function normalize(result) {\n  var newColumnFlexes = result.newColumnFlexes,\n    newColumnSizes = result.newColumnSizes,\n    maxAvailableWidthForColumns = result.maxAvailableWidthForColumns;\n  if (newColumnFlexes && !Object.keys(newColumnFlexes).length) {\n    newColumnFlexes = undefined;\n  }\n  if (newColumnSizes && !Object.keys(newColumnSizes).length) {\n    newColumnSizes = undefined;\n  }\n  return _objectSpread(_objectSpread({}, result), {}, {\n    newColumnFlexes: newColumnFlexes,\n    newColumnSizes: newColumnSizes,\n    maxAvailableWidthForColumns: maxAvailableWidthForColumns\n  });\n};\nvar assignFlexes = function assignFlexes(columns) {\n  return columns.reduce(function (flexes, col) {\n    if (col.computedFlex) {\n      flexes[col.id] = col.computedWidth;\n    }\n    return flexes;\n  }, {});\n};\nvar clampColSize = function clampColSize(size, col) {\n  return (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);\n};\nvar resizeGroupColumns = function resizeGroupColumns(arg, config) {\n  var totalDiff = arg.diff,\n    maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns,\n    shareSpaceOnResize = arg.shareSpaceOnResize,\n    index = arg.index,\n    groupColumns = arg.groupColumns,\n    columns = arg.columns;\n  columns = columns.map(function (c) {\n    return _objectSpread({}, c);\n  });\n  var newColumnSizes = config.newColumnSizes || {};\n  var columnsMap = columns.reduce(function (map, col) {\n    map[col.id] = col;\n    return map;\n  }, {});\n  var newColumnFlexes = _objectSpread(_objectSpread({}, assignFlexes(groupColumns.map(function (colId) {\n    return columnsMap[colId];\n  }))), config.newColumnFlexes);\n  while (Math.abs(totalDiff) > 0) {\n    groupColumns.forEach(function (colId, idx) {\n      var col = columnsMap[colId];\n      if (col.computedResizable === false) {\n        return;\n      }\n      var totalGroupResizableWidth = groupColumns.slice(idx).reduce(function (total, colId) {\n        var col = columnsMap[colId];\n        if (col.computedResizable === false) {\n          return total;\n        }\n        if (totalDiff > 0 && col.computedMaxWidth && col.computedWidth >= col.computedMaxWidth) {\n          return total;\n        }\n        if (totalDiff < 0 && col.computedMinWidth && col.computedWidth <= col.computedMinWidth) {\n          return total;\n        }\n        return total + col.computedWidth;\n      }, 0);\n      var diff = totalGroupResizableWidth ? Math.round(col.computedWidth / totalGroupResizableWidth * totalDiff) : 0;\n      var adjustment = 0;\n      if (!col.computedFlex) {\n        newColumnSizes[col.id] = col.computedWidth = col.computedWidth + diff;\n      } else {\n        delete newColumnSizes[col.id];\n        newColumnFlexes[col.id] = col.computedWidth = col.computedWidth + diff;\n      }\n      if (newColumnSizes[col.id] !== undefined) {\n        var size = newColumnSizes[col.id];\n        var clampedSize = (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);\n        if (clampedSize !== size) {\n          adjustment = size - clampedSize;\n          newColumnSizes[col.id] = clampedSize;\n        }\n      } else if (newColumnFlexes[col.id] !== undefined) {\n        var _size = newColumnFlexes[col.id];\n        var _clampedSize = (0, _clamp.default)(_size, col.computedMinWidth, col.computedMaxWidth);\n        if (_clampedSize !== _size) {\n          adjustment = _size - _clampedSize;\n          newColumnFlexes[col.id] = col.computedWidth = _clampedSize;\n        }\n      }\n      if (diff === 0) {\n        totalDiff = 0;\n      } else {\n        totalDiff = totalDiff - diff + adjustment;\n      }\n    });\n  }\n  return normalize(_objectSpread(_objectSpread({}, config), {}, {\n    newColumnSizes: newColumnSizes,\n    newColumnFlexes: newColumnFlexes\n  }));\n};\nvar _default = function _default(arg) {\n  var shareSpaceOnResize = arg.shareSpaceOnResize,\n    groupColumns = arg.groupColumns;\n  var result = shareSpaceOnResize ? resizeShareSpace(arg) : resizeNoShareSpace(arg);\n  if (groupColumns) {\n    return resizeGroupColumns(arg, result);\n  }\n  return result;\n};\nexports.default = _default;\nvar resizeShareSpace = function resizeShareSpace(arg) {\n  var columns = arg.columns,\n    index = arg.index,\n    diff = arg.diff;\n  var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;\n  var colLeft = columns[index];\n  var colsToRight = columns.slice(index + 1);\n  var colRight = colsToRight[0];\n  if (!colRight || colRight.computedResizable === false) {\n    return resizeNoShareSpace(arg);\n  }\n  if (!colLeft.computedFlex && !colRight.computedFlex) {\n    var _newColumnSizes;\n    var newColLeftSize = colLeft.computedWidth + diff;\n    var newColRightSize = clampColSize(colRight.computedWidth - diff, colRight);\n    var remainingDiff = newColRightSize - (colRight.computedWidth - diff);\n    var newColumnSizes = (_newColumnSizes = {}, (0, _defineProperty2.default)(_newColumnSizes, colLeft.id, newColLeftSize + remainingDiff), (0, _defineProperty2.default)(_newColumnSizes, colRight.id, newColRightSize), _newColumnSizes);\n    return normalize({\n      newColumnSizes: newColumnSizes,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n  if (colLeft.computedFlex && colRight.computedFlex) {\n    var newColumnFlexes = assignFlexes(columns);\n    newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n    newColumnFlexes[colRight.id] = colRight.computedWidth - diff;\n    return normalize({\n      newColumnFlexes: newColumnFlexes,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n  if (!colLeft.computedFlex) {\n    var _newColumnFlexes = assignFlexes(columns);\n    var _newColumnSizes2 = (0, _defineProperty2.default)({}, colLeft.id, colLeft.computedWidth + diff);\n    _newColumnFlexes[colRight.id] = colRight.computedWidth - diff;\n    return normalize({\n      newColumnFlexes: _newColumnFlexes,\n      newColumnSizes: _newColumnSizes2,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n  if (!colRight.computedFlex) {\n    var flexCount = columns.reduce(function (count, col) {\n      return count + (col.computedFlex ? 1 : 0);\n    }, 0);\n    var _newColumnFlexes2 = assignFlexes(columns);\n    var _newColumnSizes4 = (0, _defineProperty2.default)({}, colRight.id, colRight.computedWidth - diff);\n    _newColumnFlexes2[colLeft.id] = colLeft.computedWidth + diff;\n    if (flexCount === 1 && colLeft.computedFlex) {\n      _newColumnFlexes2 = {};\n    }\n    return normalize({\n      newColumnFlexes: _newColumnFlexes2,\n      newColumnSizes: _newColumnSizes4,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n};\nvar resizeNoShareSpace = function resizeNoShareSpace(arg) {\n  var columns = arg.columns,\n    index = arg.index,\n    diff = arg.diff,\n    totalComputedWidth = arg.totalComputedWidth;\n  var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;\n  var colLeft = columns[index];\n  var colsToRight = columns.slice(index + 1);\n  var colRight = colsToRight[0];\n  var newColumnSizes;\n  var newColumnFlexes;\n  var flexCount = columns.reduce(function (count, col) {\n    return count + (col.computedFlex ? 1 : 0);\n  }, 0);\n  if (!colLeft.computedFlex) {\n    if (!flexCount) {\n      newColumnSizes = {};\n      if (colLeft.computedResizable !== false) {\n        newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n      }\n      return normalize({\n        newColumnSizes: newColumnSizes,\n        newColumnFlexes: undefined,\n        maxAvailableWidthForColumns: maxAvailableWidthForColumns\n      });\n    }\n    newColumnSizes = {};\n    newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n    return normalize({\n      newColumnSizes: newColumnSizes,\n      newColumnFlexes: assignFlexes(columns),\n      maxAvailableWidthForColumns: totalComputedWidth + diff\n    });\n  }\n  newColumnFlexes = assignFlexes(columns);\n  newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n  if (flexCount === 1) {\n    if (!colLeft.keepFlex) {\n      delete newColumnFlexes[colLeft.id];\n      newColumnSizes = {};\n      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n    } else {\n      newColumnFlexes = {};\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    }\n  } else {\n    if (!colLeft.keepFlex) {\n      delete newColumnFlexes[colLeft.id];\n      newColumnSizes = {};\n      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    } else {\n      newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    }\n  }\n  return normalize({\n    newColumnFlexes: newColumnFlexes,\n    newColumnSizes: newColumnSizes,\n    maxAvailableWidthForColumns: maxAvailableWidthForColumns\n  });\n};","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_defineProperty2","_clamp","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","normalize","result","newColumnFlexes","newColumnSizes","maxAvailableWidthForColumns","undefined","assignFlexes","columns","reduce","flexes","col","computedFlex","id","computedWidth","clampColSize","size","computedMinWidth","computedMaxWidth","resizeGroupColumns","arg","config","totalDiff","diff","shareSpaceOnResize","index","groupColumns","map","c","columnsMap","colId","Math","abs","idx","computedResizable","totalGroupResizableWidth","slice","total","round","adjustment","clampedSize","_size","_clampedSize","_default","resizeShareSpace","resizeNoShareSpace","colLeft","colsToRight","colRight","_newColumnSizes","newColLeftSize","newColRightSize","remainingDiff","_newColumnFlexes","_newColumnSizes2","flexCount","count","_newColumnFlexes2","_newColumnSizes4","totalComputedWidth","keepFlex"],"sources":["/Users/alexandre.nepomuceno/Documents/agenda/node_modules/@inovua/reactdatagrid-community/utils/columnResize/index.js"],"sourcesContent":["/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _clamp = _interopRequireDefault(require(\"../clamp\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar normalize = function normalize(result) {\n  var newColumnFlexes = result.newColumnFlexes,\n    newColumnSizes = result.newColumnSizes,\n    maxAvailableWidthForColumns = result.maxAvailableWidthForColumns;\n  if (newColumnFlexes && !Object.keys(newColumnFlexes).length) {\n    newColumnFlexes = undefined;\n  }\n  if (newColumnSizes && !Object.keys(newColumnSizes).length) {\n    newColumnSizes = undefined;\n  }\n  return _objectSpread(_objectSpread({}, result), {}, {\n    newColumnFlexes: newColumnFlexes,\n    newColumnSizes: newColumnSizes,\n    maxAvailableWidthForColumns: maxAvailableWidthForColumns\n  });\n};\nvar assignFlexes = function assignFlexes(columns) {\n  return columns.reduce(function (flexes, col) {\n    if (col.computedFlex) {\n      flexes[col.id] = col.computedWidth;\n    }\n    return flexes;\n  }, {});\n};\nvar clampColSize = function clampColSize(size, col) {\n  return (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);\n};\nvar resizeGroupColumns = function resizeGroupColumns(arg, config) {\n  var totalDiff = arg.diff,\n    maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns,\n    shareSpaceOnResize = arg.shareSpaceOnResize,\n    index = arg.index,\n    groupColumns = arg.groupColumns,\n    columns = arg.columns;\n  columns = columns.map(function (c) {\n    return _objectSpread({}, c);\n  });\n  var newColumnSizes = config.newColumnSizes || {};\n  var columnsMap = columns.reduce(function (map, col) {\n    map[col.id] = col;\n    return map;\n  }, {});\n  var newColumnFlexes = _objectSpread(_objectSpread({}, assignFlexes(groupColumns.map(function (colId) {\n    return columnsMap[colId];\n  }))), config.newColumnFlexes);\n  while (Math.abs(totalDiff) > 0) {\n    groupColumns.forEach(function (colId, idx) {\n      var col = columnsMap[colId];\n      if (col.computedResizable === false) {\n        return;\n      }\n      var totalGroupResizableWidth = groupColumns.slice(idx).reduce(function (total, colId) {\n        var col = columnsMap[colId];\n        if (col.computedResizable === false) {\n          return total;\n        }\n        if (totalDiff > 0 && col.computedMaxWidth && col.computedWidth >= col.computedMaxWidth) {\n          return total;\n        }\n        if (totalDiff < 0 && col.computedMinWidth && col.computedWidth <= col.computedMinWidth) {\n          return total;\n        }\n        return total + col.computedWidth;\n      }, 0);\n      var diff = totalGroupResizableWidth ? Math.round(col.computedWidth / totalGroupResizableWidth * totalDiff) : 0;\n      var adjustment = 0;\n      if (!col.computedFlex) {\n        newColumnSizes[col.id] = col.computedWidth = col.computedWidth + diff;\n      } else {\n        delete newColumnSizes[col.id];\n        newColumnFlexes[col.id] = col.computedWidth = col.computedWidth + diff;\n      }\n      if (newColumnSizes[col.id] !== undefined) {\n        var size = newColumnSizes[col.id];\n        var clampedSize = (0, _clamp.default)(size, col.computedMinWidth, col.computedMaxWidth);\n        if (clampedSize !== size) {\n          adjustment = size - clampedSize;\n          newColumnSizes[col.id] = clampedSize;\n        }\n      } else if (newColumnFlexes[col.id] !== undefined) {\n        var _size = newColumnFlexes[col.id];\n        var _clampedSize = (0, _clamp.default)(_size, col.computedMinWidth, col.computedMaxWidth);\n        if (_clampedSize !== _size) {\n          adjustment = _size - _clampedSize;\n          newColumnFlexes[col.id] = col.computedWidth = _clampedSize;\n        }\n      }\n      if (diff === 0) {\n        totalDiff = 0;\n      } else {\n        totalDiff = totalDiff - diff + adjustment;\n      }\n    });\n  }\n  return normalize(_objectSpread(_objectSpread({}, config), {}, {\n    newColumnSizes: newColumnSizes,\n    newColumnFlexes: newColumnFlexes\n  }));\n};\nvar _default = function _default(arg) {\n  var shareSpaceOnResize = arg.shareSpaceOnResize,\n    groupColumns = arg.groupColumns;\n  var result = shareSpaceOnResize ? resizeShareSpace(arg) : resizeNoShareSpace(arg);\n  if (groupColumns) {\n    return resizeGroupColumns(arg, result);\n  }\n  return result;\n};\nexports.default = _default;\nvar resizeShareSpace = function resizeShareSpace(arg) {\n  var columns = arg.columns,\n    index = arg.index,\n    diff = arg.diff;\n  var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;\n  var colLeft = columns[index];\n  var colsToRight = columns.slice(index + 1);\n  var colRight = colsToRight[0];\n  if (!colRight || colRight.computedResizable === false) {\n    return resizeNoShareSpace(arg);\n  }\n  if (!colLeft.computedFlex && !colRight.computedFlex) {\n    var _newColumnSizes;\n    var newColLeftSize = colLeft.computedWidth + diff;\n    var newColRightSize = clampColSize(colRight.computedWidth - diff, colRight);\n    var remainingDiff = newColRightSize - (colRight.computedWidth - diff);\n    var newColumnSizes = (_newColumnSizes = {}, (0, _defineProperty2.default)(_newColumnSizes, colLeft.id, newColLeftSize + remainingDiff), (0, _defineProperty2.default)(_newColumnSizes, colRight.id, newColRightSize), _newColumnSizes);\n    return normalize({\n      newColumnSizes: newColumnSizes,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n  if (colLeft.computedFlex && colRight.computedFlex) {\n    var newColumnFlexes = assignFlexes(columns);\n    newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n    newColumnFlexes[colRight.id] = colRight.computedWidth - diff;\n    return normalize({\n      newColumnFlexes: newColumnFlexes,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n  if (!colLeft.computedFlex) {\n    var _newColumnFlexes = assignFlexes(columns);\n    var _newColumnSizes2 = (0, _defineProperty2.default)({}, colLeft.id, colLeft.computedWidth + diff);\n    _newColumnFlexes[colRight.id] = colRight.computedWidth - diff;\n    return normalize({\n      newColumnFlexes: _newColumnFlexes,\n      newColumnSizes: _newColumnSizes2,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n  if (!colRight.computedFlex) {\n    var flexCount = columns.reduce(function (count, col) {\n      return count + (col.computedFlex ? 1 : 0);\n    }, 0);\n    var _newColumnFlexes2 = assignFlexes(columns);\n    var _newColumnSizes4 = (0, _defineProperty2.default)({}, colRight.id, colRight.computedWidth - diff);\n    _newColumnFlexes2[colLeft.id] = colLeft.computedWidth + diff;\n    if (flexCount === 1 && colLeft.computedFlex) {\n      _newColumnFlexes2 = {};\n    }\n    return normalize({\n      newColumnFlexes: _newColumnFlexes2,\n      newColumnSizes: _newColumnSizes4,\n      maxAvailableWidthForColumns: maxAvailableWidthForColumns\n    });\n  }\n};\nvar resizeNoShareSpace = function resizeNoShareSpace(arg) {\n  var columns = arg.columns,\n    index = arg.index,\n    diff = arg.diff,\n    totalComputedWidth = arg.totalComputedWidth;\n  var maxAvailableWidthForColumns = arg.maxAvailableWidthForColumns;\n  var colLeft = columns[index];\n  var colsToRight = columns.slice(index + 1);\n  var colRight = colsToRight[0];\n  var newColumnSizes;\n  var newColumnFlexes;\n  var flexCount = columns.reduce(function (count, col) {\n    return count + (col.computedFlex ? 1 : 0);\n  }, 0);\n  if (!colLeft.computedFlex) {\n    if (!flexCount) {\n      newColumnSizes = {};\n      if (colLeft.computedResizable !== false) {\n        newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n      }\n      return normalize({\n        newColumnSizes: newColumnSizes,\n        newColumnFlexes: undefined,\n        maxAvailableWidthForColumns: maxAvailableWidthForColumns\n      });\n    }\n    newColumnSizes = {};\n    newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n    return normalize({\n      newColumnSizes: newColumnSizes,\n      newColumnFlexes: assignFlexes(columns),\n      maxAvailableWidthForColumns: totalComputedWidth + diff\n    });\n  }\n  newColumnFlexes = assignFlexes(columns);\n  newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n  if (flexCount === 1) {\n    if (!colLeft.keepFlex) {\n      delete newColumnFlexes[colLeft.id];\n      newColumnSizes = {};\n      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n    } else {\n      newColumnFlexes = {};\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    }\n  } else {\n    if (!colLeft.keepFlex) {\n      delete newColumnFlexes[colLeft.id];\n      newColumnSizes = {};\n      newColumnSizes[colLeft.id] = clampColSize(colLeft.computedWidth + diff, colLeft);\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    } else {\n      newColumnFlexes[colLeft.id] = colLeft.computedWidth + diff;\n      maxAvailableWidthForColumns = totalComputedWidth + diff;\n    }\n  }\n  return normalize({\n    newColumnFlexes: newColumnFlexes,\n    newColumnSizes: newColumnSizes,\n    maxAvailableWidthForColumns: maxAvailableWidthForColumns\n  });\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}