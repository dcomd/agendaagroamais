/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _region = _interopRequireDefault(require("@inovua/reactdatagrid-community/packages/region"));
var _ColumnLayout = _interopRequireDefault(require("@inovua/reactdatagrid-community/Layout/ColumnLayout"));
var _DragRow = _interopRequireDefault(require("./plugins/row-reorder/DragRow"));
var _DragRowArrow = _interopRequireDefault(require("./plugins/row-reorder/DragRowArrow"));
var _ScrollingRegion = _interopRequireDefault(require("./plugins/row-reorder/ScrollingRegion"));
var _getRangesForRows = _interopRequireDefault(require("./plugins/row-reorder/utils/getRangesForRows"));
var _setupRowDrag = _interopRequireDefault(require("./plugins/row-reorder/utils/setupRowDrag"));
var _getDropRowIndex2 = _interopRequireDefault(require("./plugins/row-reorder/utils/getDropRowIndex"));
var _moveYAfterX = _interopRequireDefault(require("./plugins/row-reorder/utils/moveYAfterX"));
var _dropIndexValidation = _interopRequireDefault(require("./plugins/row-reorder/utils/dropIndexValidation"));
var _LockedRows = _interopRequireDefault(require("./plugins/locked-rows/LockedRows"));
var _getRangesForGroups = _interopRequireDefault(require("./plugins/row-reorder/utils/getRangesForGroups"));
var _getRangesForTree = _interopRequireDefault(require("./plugins/row-reorder/utils/getRangesForTree"));
var _getDropGroup3 = _interopRequireDefault(require("./plugins/row-reorder/utils/getDropGroup"));
var _getDropParent3 = _interopRequireDefault(require("./plugins/row-reorder/utils/getDropParent"));
var _updateTreeData = _interopRequireDefault(require("./plugins/tree/tree/updateTreeData"));
var _getGlobal = require("@inovua/reactdatagrid-community/getGlobal");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var globalObject = (0, _getGlobal.getGlobal)();
var raf = globalObject.requestAnimationFrame;
var identity = function identity(a) {
  return a;
};
var InovuaDataGridEnterpriseColumnLayout = function (_InovuaDataGridColumn) {
  (0, _inherits2.default)(InovuaDataGridEnterpriseColumnLayout, _InovuaDataGridColumn);
  var _super = _createSuper(InovuaDataGridEnterpriseColumnLayout);
  function InovuaDataGridEnterpriseColumnLayout(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, InovuaDataGridEnterpriseColumnLayout);
    _this = _super.call(this, _props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dropIndex", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dragBoxInitialHeight", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dropRowHeight", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "validDropPositions", []);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollTopRegionRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrollBottomRegionRef", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dragRowArrow", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refDragRow", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "refDragRowArrow", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dragRow", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "content", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "direction", 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "SCROLL_MARGIN", 40);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "DRAG_ROW_MAX_HEIGHT", 100);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "iterate", true);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "DRAG_INFO", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "scrolling", false);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "gridScrollInterval", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedEndRows", function (computedProps) {
      return _this.renderLockedRows(computedProps.computedLockedEndRows, 'end', computedProps);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedStartRows", function (computedProps) {
      return _this.renderLockedRows(computedProps.computedLockedStartRows, 'start', computedProps);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderLockedRows", function (rows, position, computedProps) {
      if (!rows || !rows.length) {
        return null;
      }
      return _react.default.createElement(_LockedRows.default, {
        key: position,
        rows: rows,
        computedProps: computedProps,
        position: position
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderDragRowArrow", function () {
      var props = _this.lastComputedProps;
      var rowReorderArrowStyle = props.rowReorderArrowStyle;
      return _react.default.createElement(_DragRowArrow.default, {
        ref: _this.refDragRowArrow,
        rowHeight: _this.dropRowHeight,
        rowReorderArrowStyle: rowReorderArrowStyle
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderReorderRowProxy", function (props) {
      return _react.default.createElement(_DragRow.default, {
        ref: _this.refDragRow,
        renderRowReorderProxy: props && props.renderRowReorderProxy
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollingTopRegion", function () {
      return _react.default.createElement(_ScrollingRegion.default, {
        ref: _this.scrollTopRegionRef,
        dir: -1,
        onMouseEnter: function onMouseEnter(event) {
          return _this.onScrollingRegionMouseEnter(event, -1);
        },
        onMouseLeave: _this.onScrollingRegionMouseLeave
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderScrollingBottomRegion", function () {
      return _react.default.createElement(_ScrollingRegion.default, {
        ref: _this.scrollBottomRegionRef,
        dir: 1,
        onMouseEnter: function onMouseEnter(event) {
          return _this.onScrollingRegionMouseEnter(event, 1);
        },
        onMouseLeave: _this.onScrollingRegionMouseLeave
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollingRegionMouseEnter", function (event, dir) {
      if (event.cancelable) {
        event.preventDefault();
      }
      if (_this.DRAG_INFO && _this.DRAG_INFO.dragging) {
        _this.scrolling = true;
        var props = _this.lastComputedProps;
        var rowReorderScrollByAmount = props.rowReorderScrollByAmount,
          rowReorderAutoScrollSpeed = props.rowReorderAutoScrollSpeed;
        if (_this.scrolling && dir) {
          globalObject.clearInterval(_this.gridScrollInterval);
          _this.gridScrollInterval = globalObject.setInterval(function () {
            return _this.startScrolling(rowReorderScrollByAmount, dir);
          }, rowReorderAutoScrollSpeed);
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "startScrolling", function (rowReorderScrollByAmount, dir) {
      var initialScrollTop = _this.getScrollTop();
      var newScrollTop = initialScrollTop + dir * rowReorderScrollByAmount;
      raf(function () {
        _this.setScrollPosition(newScrollTop);
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollPosition", function (scrollTop) {
      var scrollTopMax = _this.getScrollTopMax();
      _this.setReorderArrowVisible(false);
      if (scrollTop < 0) {
        scrollTop = 0;
      }
      if (scrollTop > scrollTopMax) {
        scrollTop = scrollTopMax;
      }
      _this.setScrollTop(scrollTop);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onScrollingRegionMouseLeave", function () {
      _this.scrolling = false;
      _this.setReorderArrowVisible(true);
      globalObject.clearInterval(_this.gridScrollInterval);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDragRowInstance", function (dragIndex) {
      var visibleRows = _this.getContentRows();
      var dragRow = visibleRows.filter(function (row) {
        if (!row) {
          return;
        }
        return row.props.rowIndex === dragIndex;
      })[0];
      return dragRow;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onDragRowMouseDownHandle", function (ev, index, cellNode) {
      var dragIndex = index;
      var props = _this.lastComputedProps;
      if (!_this.onRowReorderValidation(ev, props, dragIndex)) {
        return;
      }
      var computedFocused = props.computedFocused,
        computedSetFocused = props.computedSetFocused,
        setActiveIndex = props.setActiveIndex;
      var _this$initDrag = _this.initDrag({
          cellNode: cellNode
        }),
        contentRegion = _this$initDrag.contentRegion,
        headerHeight = _this$initDrag.headerHeight,
        cellRegion = _this$initDrag.cellRegion;
      _this.dragRowArrow.setOffset(headerHeight);
      if (!computedFocused) {
        computedSetFocused(true);
      }
      setActiveIndex(index);
      _this.setupDrag(ev, {
        dragIndex: dragIndex,
        contentRegion: contentRegion,
        headerHeight: headerHeight,
        cellRegion: cellRegion
      }, props);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setupDrag", function (event, _ref, props) {
      var dragIndex = _ref.dragIndex,
        contentRegion = _ref.contentRegion,
        headerHeight = _ref.headerHeight,
        cellRegion = _ref.cellRegion;
      var _this$getDragBoxIniti = _this.getDragBoxInitialRegion({
          dragIndex: dragIndex
        }),
        dragBoxInitialRegion = _this$getDragBoxIniti.dragBoxInitialRegion,
        dragRowHeight = _this$getDragBoxIniti.dragRowHeight;
      var _this$getDragProxy = _this.getDragProxy(props, {
          dragIndex: dragIndex,
          contentRegion: contentRegion,
          cellRegion: cellRegion,
          dragBoxInitialRegion: dragBoxInitialRegion
        }),
        dragProxy = _this$getDragProxy.dragProxy,
        dragProxyPosition = _this$getDragProxy.dragProxyPosition,
        dragBoxOffsets = _this$getDragProxy.dragBoxOffsets,
        leftBoxOffset = _this$getDragProxy.leftBoxOffset;
      _this.setScrollRegionVisibility(props);
      dragProxy.setHeight(dragRowHeight);
      dragProxy.setTop(dragProxyPosition.top);
      dragProxy.setLeft(dragProxyPosition.left);
      var initialScrollTop = _this.getScrollTop();
      var _this$getRanges = _this.getRanges(props, {
          initialScrollTop: initialScrollTop,
          contentRegion: contentRegion,
          dragBoxInitialRegion: dragBoxInitialRegion
        }),
        ranges = _this$getRanges.ranges,
        selectedGroup = _this$getRanges.selectedGroup,
        selectedParent = _this$getRanges.selectedParent;
      _this.dragStartCallbacks(props, dragIndex, selectedGroup);
      _this.DRAG_INFO = {
        dragging: true,
        dragIndex: dragIndex,
        ranges: ranges,
        selectedGroup: selectedGroup,
        selectedParent: selectedParent,
        contentRegion: contentRegion,
        headerHeight: headerHeight,
        dragBoxInitialRegion: dragBoxInitialRegion,
        dragBoxRegion: dragBoxInitialRegion.clone(),
        dragProxy: dragProxy,
        dragBoxOffsets: dragBoxOffsets,
        initialScrollTop: initialScrollTop,
        leftBoxOffset: leftBoxOffset,
        scrollTopMax: _this.getScrollTopMax()
      };
      _this.iterate = true;
      _this.setReorderArrowAt(dragIndex, ranges, 0);
      (0, _setupRowDrag.default)(event, dragBoxInitialRegion, {
        onDrag: function onDrag(event, config) {
          return _this.onRowDrag(event, config, props);
        },
        onDrop: function onDrop(event, config) {
          return _this.onRowDrop(event, config, props);
        }
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowDrag", function (_event, config, props) {
      if (!_this.DRAG_INFO) {
        return;
      }
      var _this$DRAG_INFO = _this.DRAG_INFO,
        dragIndex = _this$DRAG_INFO.dragIndex,
        dragBoxInitialRegion = _this$DRAG_INFO.dragBoxInitialRegion,
        dragProxy = _this$DRAG_INFO.dragProxy,
        dragBoxOffsets = _this$DRAG_INFO.dragBoxOffsets;
      var _this$adjustScrollOnD = _this.adjustScrollOnDrag(props, config),
        initialDiffTop = _this$adjustScrollOnD.initialDiffTop,
        initialDiffLeft = _this$adjustScrollOnD.initialDiffLeft,
        dragProxyAdjust = _this$adjustScrollOnD.dragProxyAdjust,
        scrollDiff = _this$adjustScrollOnD.scrollDiff,
        scrollTop = _this$adjustScrollOnD.scrollTop,
        diffTop = _this$adjustScrollOnD.diffTop,
        diffLeft = _this$adjustScrollOnD.diffLeft;
      var _this$adjustDragProxy = _this.adjustDragProxy({
          diffTop: diffTop,
          diffLeft: diffLeft,
          initialDiffTop: initialDiffTop,
          initialDiffLeft: initialDiffLeft,
          dragProxyAdjust: dragProxyAdjust
        }),
        dragProxyTop = _this$adjustDragProxy.dragProxyTop,
        dragProxyLeft = _this$adjustDragProxy.dragProxyLeft;
      dragProxy.setTop(dragProxyTop);
      dragProxy.setLeft(dragProxyLeft);
      dragProxy.setVisible(true);
      var dropIndex = -1;
      var dir = initialDiffTop > 0 ? 1 : -1;
      _this.direction = dir;
      var rowHeightManager = props.rowHeightManager,
        computedGroupBy = props.computedGroupBy,
        computedTreeEnabled = props.computedTreeEnabled,
        silentSetData = props.silentSetData,
        enableTreeRowReorderNestingChange = props.enableTreeRowReorderNestingChange;
      if (computedGroupBy && computedGroupBy.length > 0) {
        _this.getDropGroup();
      }
      if (computedTreeEnabled) {
        _this.getDropParent();
      }
      var _getDropRowIndex = (0, _getDropRowIndex2.default)({
          rowHeightManager: rowHeightManager,
          dragBoxInitialRegion: dragBoxInitialRegion,
          dragBoxOffsets: dragBoxOffsets,
          initialDiffTop: initialDiffTop,
          scrollTop: scrollTop,
          dragIndex: dragIndex,
          dir: dir
        }),
        newDropIndex = _getDropRowIndex.index;
      if (newDropIndex !== -1) {
        dropIndex = newDropIndex;
      }
      if (dropIndex === dragIndex && computedTreeEnabled && enableTreeRowReorderNestingChange) {
        _this.computedNesting(props, dragProxyLeft, dragIndex, silentSetData);
        return;
      }
      if (_this.dropIndex !== dropIndex) {
        _this.getValidDropPositions(props, dragIndex, dropIndex);
        _this.dragRowArrow.setValid(_this.validDropPositions[dropIndex]);
      }
      _this.dropIndex = dropIndex;
      var rowHeight = rowHeightManager.getRowHeight(_this.dropIndex);
      _this.dragRowArrow.setHeight(rowHeight);
      if (dragIndex !== _this.dropIndex) {
        var compareRanges = _this.compareRanges({
          scrollDiff: scrollDiff
        });
        _this.setReorderArrowAt(_this.dropIndex, compareRanges, dir);
      } else {
        _this.setReorderArrowVisible(false);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowDrop", function (_event, _config, props) {
      var _assertThisInitialize = (0, _assertThisInitialized2.default)(_this),
        dropIndex = _assertThisInitialize.dropIndex;
      var onRowReorder = props.onRowReorder,
        setActiveIndex = props.setActiveIndex,
        computedGroupBy = props.computedGroupBy,
        computedTreeEnabled = props.computedTreeEnabled,
        generateIdFromPath = props.generateIdFromPath,
        enableTreeRowReorderNestingChange = props.enableTreeRowReorderNestingChange;
      _this.dragEndCallbacks(props, dropIndex);
      if (!_this.DRAG_INFO) {
        _this.clearDropInfo();
        return;
      }
      var dragIndex = _this.DRAG_INFO.dragIndex;
      if (dropIndex === -1 && computedTreeEnabled && enableTreeRowReorderNestingChange) {
        _this.clearDropInfo();
        return;
      }
      if (dropIndex === undefined) {
        _this.cancelDrop();
        _this.clearDropInfo();
        return;
      }
      if (dropIndex === dragIndex) {
        _this.clearDropInfo();
        return;
      }
      if (!_this.validDropPositions[dropIndex]) {
        _this.clearDropInfo();
        return;
      }
      if (computedGroupBy && computedGroupBy.length > 0) {
        _this.updateGroups(props, dragIndex, dropIndex);
        return;
      }
      if (computedTreeEnabled && generateIdFromPath) {
        _this.updateTree(props, dragIndex, dropIndex);
        return;
      }
      _this.clearDropInfo();
      setActiveIndex(dropIndex);
      if (onRowReorder && typeof onRowReorder === 'function') {
        _this.onRowReorder(props, {
          dragIndex: dragIndex,
          dropIndex: dropIndex
        });
        return;
      }
      _this.updateDataSource(props, {
        dropIndex: dropIndex,
        dragIndex: dragIndex
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateDataSource", function (props, _ref2) {
      var dropIndex = _ref2.dropIndex,
        dragIndex = _ref2.dragIndex;
      var data = props.data,
        setOriginalData = props.setOriginalData;
      if (_this.validDropPositions[dropIndex]) {
        var newDataSource = (0, _moveYAfterX.default)(data, dragIndex, dropIndex);
        setOriginalData(newDataSource);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateTree", function (props, dragIndex, dropIndex) {
      var data = props.data,
        silentSetData = props.silentSetData,
        nodePathSeparator = props.nodePathSeparator,
        onTreeRowReorderEnd = props.onTreeRowReorderEnd;
      var _this$DRAG_INFO2 = _this.DRAG_INFO,
        selectedParent = _this$DRAG_INFO2.selectedParent,
        dropParent = _this$DRAG_INFO2.dropParent;
      if (_this.validDropPositions[dropIndex]) {
        var dropDepth = _this.DRAG_INFO.dropDepth;
        var direction = _this.direction;
        var dataSource = (0, _moveYAfterX.default)(data, dragIndex, dropIndex);
        var newDataSource = _this.recomputeNodeProps(dataSource, direction, dropIndex, dropDepth, dropParent, nodePathSeparator);
        (0, _updateTreeData.default)(props, {
          selectedPath: selectedParent,
          destinationPath: dropParent
        });
        if (onTreeRowReorderEnd) {
          onTreeRowReorderEnd({
            updatedTreeData: props.originalData
          });
        }
        _this.clearDropInfo();
        silentSetData(newDataSource);
        props.reload();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateGroups", function () {
      var _ref3 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(props, dragIndex, dropIndex) {
        var data, silentSetData, setItemOnReorderingGroups, _this$DRAG_INFO3, dropGroup, selectedGroup, newDataSource;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              data = props.data, silentSetData = props.silentSetData, setItemOnReorderingGroups = props.setItemOnReorderingGroups;
              _this$DRAG_INFO3 = _this.DRAG_INFO, dropGroup = _this$DRAG_INFO3.dropGroup, selectedGroup = _this$DRAG_INFO3.selectedGroup;
              _this.dragEndGroupCallbacks(props, dropIndex, dropGroup);
              if (selectedGroup.localeCompare(dropGroup)) {
                _context.next = 10;
                break;
              }
              _context.next = 6;
              return (0, _moveYAfterX.default)(data, dragIndex, dropIndex);
            case 6:
              newDataSource = _context.sent;
              silentSetData(newDataSource);
              _this.clearDropInfo();
              return _context.abrupt("return");
            case 10:
              if (!dropGroup) {
                _context.next = 13;
                break;
              }
              new Promise(function (resolve) {
                var item = _this.computeItem(props);
                resolve(setItemOnReorderingGroups(dragIndex, item, {
                  replace: false
                }));
              }).then(function () {
                return (0, _moveYAfterX.default)(data, dragIndex, dropIndex);
              }).then(function (newDataSource) {
                silentSetData(newDataSource);
              }).then(function () {
                _this.clearDropInfo();
              }).catch(function (error) {
                console.error(error);
              });
              return _context.abrupt("return");
            case 13:
              _this.clearDropInfo();
              return _context.abrupt("return");
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function (_x, _x2, _x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "recomputeNodeProps", function (data, direction, dropIndex, dropDepth, destinationPath, pathSeparator) {
      var parentNodeIdArr = destinationPath.split(pathSeparator);
      parentNodeIdArr.splice(parentNodeIdArr.length - 1, 1);
      var parentNodeId = parentNodeIdArr.join(pathSeparator);
      if (direction < 0) {
        data[dropIndex].__nodeProps.depth = dropDepth;
        data[dropIndex].__nodeProps.parentNodeId = parentNodeId;
      }
      if (direction > 0) {
        data[dropIndex].__nodeProps.depth = dropDepth;
        data[dropIndex].__nodeProps.parentNodeId = parentNodeId;
      }
      return data;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "computedNesting", function (props, dragProxyLeft, dragIndex, silentSetData) {
      if (dragProxyLeft < -20) {
        _this.updateNesting(-1, props, dragIndex, silentSetData);
      } else if (dragProxyLeft > 80) {
        _this.updateNesting(1, props, dragIndex, silentSetData);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "updateNesting", function (dir, props, dragIndex, silentSetData) {
      var originalData = props.originalData;
      var data = props.data;
      var idProperty = props.idProperty;
      var pathSeparator = props.nodePathSeparator;
      var nodesName = props.nodesProperty;
      var generateIdFromPath = props.generateIdFromPath;
      var dataSource = (0, _toConsumableArray2.default)(data);
      var selectedPath = _this.DRAG_INFO.selectedParent;
      var depth = dataSource[dragIndex].__nodeProps.depth + dir;
      var computeNesting = function computeNesting(dataArray) {
        var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var parentNode = arguments.length > 2 ? arguments[2] : undefined;
        if (_this.iterate) {
          for (var i = 0; i < dataArray.length; i++) {
            var item = dataArray[i];
            if (!item) {
              continue;
            }
            var itemId = "".concat(item[idProperty]);
            var itemNodes = item[nodesName];
            var parentNodeId = parentNode ? "".concat(parentNode[idProperty]) : undefined;
            var path = parentNode ? "".concat(parentNodeId).concat(pathSeparator).concat(itemId) : "".concat(itemId);
            if (generateIdFromPath) {
              item[idProperty] = path;
            }
            if (parentNode === undefined) {
              result.push(item);
            } else {
              if (path === selectedPath) {
                if (depth < 0) {
                  _this.clearDropInfo();
                  break;
                }
                var parentNodes = parentNode[nodesName];
                var extraNodeProps = identity({
                  depth: depth
                });
                var itemWithExtraProps = _objectSpread(_objectSpread({}, item), {}, {
                  __extraNodeProps: extraNodeProps
                });
                parentNodes[i] = itemWithExtraProps;
                _this.iterate = false;
                props.reload();
                break;
              }
            }
            if (Array.isArray(itemNodes)) {
              computeNesting(itemNodes, result, item);
            }
          }
        }
        return result;
      };
      var computeIds = function computeIds(dataArray) {
        for (var i = 0; i < dataArray.length; i++) {
          var item = dataArray[i];
          if (!item) {
            continue;
          }
          var itemNodes = item[nodesName];
          item[idProperty] = i + 1;
          if (Array.isArray(itemNodes)) {
            computeIds(itemNodes);
          }
        }
      };
      var newOriginalData = computeNesting(originalData);
      computeIds(newOriginalData);
      if (depth < 0) {
        _this.clearDropInfo();
        return;
      }
      dataSource[dragIndex].__nodeProps.depth = depth;
      _this.clearDropInfo();
      silentSetData(dataSource);
      return;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "computeItem", function (props) {
      var groupBy = props.computedGroupBy;
      var dropKeyPath = _this.DRAG_INFO.dropKeyPath;
      if (!dropKeyPath) {
        return {};
      }
      var item = {};
      for (var i = 0; i < groupBy.length; i++) {
        item[groupBy[i]] = dropKeyPath[i];
      }
      return item;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "initDrag", function (_ref4) {
      var cellNode = _ref4.cellNode;
      var contentNode = _this.content.getDOMNode();
      var headerNode = _this.headerLayout ? _this.headerLayout.headerDomNode.current : null;
      var contentRegion = _region.default.from(contentNode);
      var headerRegion = _region.default.from(headerNode);
      var headerHeight = headerRegion.getHeight();
      var node = cellNode && cellNode.current;
      var cellRegion = _region.default.from(node);
      return {
        contentRegion: contentRegion,
        headerHeight: headerHeight,
        cellRegion: cellRegion
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDropGroup", function () {
      var _this$DRAG_INFO4 = _this.DRAG_INFO,
        ranges = _this$DRAG_INFO4.ranges,
        dragBoxRegion = _this$DRAG_INFO4.dragBoxRegion;
      var _getDropGroup = (0, _getDropGroup3.default)({
          ranges: ranges,
          dragBoxRegion: dragBoxRegion
        }),
        dropGroup = _getDropGroup.dropGroup,
        dropKeyPath = _getDropGroup.keyPath;
      _this.DRAG_INFO = Object.assign({}, _this.DRAG_INFO, {
        dropGroup: dropGroup,
        dropKeyPath: dropKeyPath
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDropParent", function () {
      var _this$DRAG_INFO5 = _this.DRAG_INFO,
        ranges = _this$DRAG_INFO5.ranges,
        dragBoxRegion = _this$DRAG_INFO5.dragBoxRegion;
      var _getDropParent = (0, _getDropParent3.default)({
          ranges: ranges,
          dragBoxRegion: dragBoxRegion
        }),
        dropParent = _getDropParent.dropParent,
        dropDepth = _getDropParent.dropDepth;
      _this.DRAG_INFO = Object.assign({}, _this.DRAG_INFO, {
        dropParent: dropParent,
        dropDepth: dropDepth
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowReorder", function (props, _ref5) {
      var dragIndex = _ref5.dragIndex,
        dropIndex = _ref5.dropIndex;
      var data = props.data,
        onRowReorder = props.onRowReorder;
      var rowData = data[dragIndex];
      onRowReorder({
        data: rowData,
        dragRowIndex: dragIndex,
        insertRowIndex: dropIndex
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDragProxy", function (props, _ref6) {
      var dragIndex = _ref6.dragIndex,
        contentRegion = _ref6.contentRegion,
        cellRegion = _ref6.cellRegion,
        dragBoxInitialRegion = _ref6.dragBoxInitialRegion;
      var dragProxy = _this.dragRow ? _this.dragRow : undefined;
      dragProxy.setDragIndex(dragIndex);
      dragProxy.setProps(props);
      var dragBoxOffsets = {
        top: contentRegion.top,
        left: contentRegion.left
      };
      var leftBoxOffset = cellRegion.left - dragBoxOffsets.left;
      _this.dragRowArrow.setLeft(leftBoxOffset);
      var dragProxyPosition = {
        top: dragBoxInitialRegion.top - dragBoxOffsets.top,
        left: dragBoxInitialRegion.left - dragBoxOffsets.left
      };
      return {
        dragProxy: dragProxy,
        dragProxyPosition: dragProxyPosition,
        dragBoxOffsets: dragBoxOffsets,
        leftBoxOffset: leftBoxOffset
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getDragBoxInitialRegion", function (_ref7) {
      var dragIndex = _ref7.dragIndex;
      var dragBox = _this.getDragRowInstance(dragIndex);
      var dragBoxNode = dragBox.domRef ? dragBox.domRef.current : null;
      var dragBoxInitialRegion;
      if (dragBox) {
        dragBoxInitialRegion = _region.default.from(dragBoxNode);
      }
      _this.dragBoxInitialHeight = dragBoxInitialRegion && dragBoxInitialRegion.getHeight();
      if (_this.DRAG_ROW_MAX_HEIGHT && dragBoxInitialRegion && dragBoxInitialRegion.getHeight() > _this.DRAG_ROW_MAX_HEIGHT) {
        dragBoxInitialRegion.setHeight(_this.DRAG_ROW_MAX_HEIGHT);
        dragBoxInitialRegion.shift({
          top: _this.dragBoxInitialHeight / 2 - _this.DRAG_ROW_MAX_HEIGHT / 2
        });
      }
      var dragRowHeight = dragBoxInitialRegion.getHeight();
      return {
        dragBoxInitialRegion: dragBoxInitialRegion,
        dragRowHeight: dragRowHeight
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setScrollRegionVisibility", function (props) {
      if (_this.scrollTopRegionRef.current) {
        _this.scrollTopRegionRef.current.setVisible(true);
        var height = _this.headerLayout && _this.headerLayout.headerNode && _this.headerLayout.headerNode.offsetHeight || props.rowHeight / 2 || 0;
        _this.scrollTopRegionRef.current.setHeight(height);
      }
      if (_this.scrollBottomRegionRef.current) {
        _this.scrollBottomRegionRef.current.setVisible(true);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getRanges", function (props, _ref8) {
      var initialScrollTop = _ref8.initialScrollTop,
        contentRegion = _ref8.contentRegion,
        dragBoxInitialRegion = _ref8.dragBoxInitialRegion;
      var count = props.count,
        rowHeightManager = props.rowHeightManager,
        data = props.data,
        computedGroupBy = props.computedGroupBy,
        computedTreeEnabled = props.computedTreeEnabled,
        generateIdFromPath = props.generateIdFromPath;
      var ranges = [];
      var selectedGroup;
      var selectedParent = '';
      if (computedGroupBy && computedGroupBy.length > 0) {
        ranges = (0, _getRangesForGroups.default)({
          data: data,
          initialOffset: contentRegion.top,
          rowHeightManager: rowHeightManager,
          initialScrollTop: initialScrollTop
        });
        var _getDropGroup2 = (0, _getDropGroup3.default)({
            ranges: ranges,
            dragBoxRegion: dragBoxInitialRegion
          }),
          dropGroup = _getDropGroup2.dropGroup;
        selectedGroup = dropGroup;
      } else if (computedTreeEnabled && generateIdFromPath) {
        ranges = (0, _getRangesForTree.default)({
          data: data,
          initialOffset: contentRegion.top,
          rowHeightManager: rowHeightManager,
          initialScrollTop: initialScrollTop
        });
        var _getDropParent2 = (0, _getDropParent3.default)({
            ranges: ranges,
            dragBoxRegion: dragBoxInitialRegion
          }),
          dropParent = _getDropParent2.dropParent;
        selectedParent = dropParent;
      } else {
        ranges = (0, _getRangesForRows.default)({
          count: count,
          initialOffset: contentRegion.top,
          rowHeightManager: rowHeightManager,
          initialScrollTop: initialScrollTop
        });
      }
      return {
        ranges: ranges,
        selectedGroup: selectedGroup,
        selectedParent: selectedParent
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "compareRanges", function (_ref9) {
      var scrollDiff = _ref9.scrollDiff;
      var ranges = _this.DRAG_INFO.ranges;
      var mapRange = function mapRange(r) {
        if (!r) {
          return null;
        }
        if (r && r.group) {
          return null;
        } else {
          return _objectSpread(_objectSpread({}, r), {}, {
            top: r.top - scrollDiff,
            bottom: r.bottom - scrollDiff
          });
        }
      };
      return ranges.map(mapRange);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "adjustDragProxy", function (_ref10) {
      var diffTop = _ref10.diffTop,
        diffLeft = _ref10.diffLeft,
        initialDiffTop = _ref10.initialDiffTop,
        initialDiffLeft = _ref10.initialDiffLeft,
        dragProxyAdjust = _ref10.dragProxyAdjust;
      var _this$DRAG_INFO6 = _this.DRAG_INFO,
        dragBoxRegion = _this$DRAG_INFO6.dragBoxRegion,
        dragBoxInitialRegion = _this$DRAG_INFO6.dragBoxInitialRegion,
        dragBoxOffsets = _this$DRAG_INFO6.dragBoxOffsets,
        headerHeight = _this$DRAG_INFO6.headerHeight,
        leftBoxOffset = _this$DRAG_INFO6.leftBoxOffset;
      dragBoxRegion.set({
        top: dragBoxInitialRegion.top,
        bottom: dragBoxInitialRegion.bottom,
        left: dragBoxInitialRegion.left,
        right: dragBoxInitialRegion.right
      });
      dragBoxRegion.shift({
        top: diffTop,
        left: diffLeft
      });
      var dragProxyTop = dragBoxInitialRegion.top - dragBoxOffsets.top + initialDiffTop - dragProxyAdjust + headerHeight;
      var dragProxyLeft = dragBoxInitialRegion.left - dragBoxOffsets.left + initialDiffLeft + leftBoxOffset;
      return {
        dragProxyTop: dragProxyTop,
        dragProxyLeft: dragProxyLeft
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "getValidDropPositions", function (props, dragIndex, dropIndex) {
      var computedGroupBy = props.computedGroupBy,
        data = props.data,
        count = props.count,
        isRowReorderValid = props.isRowReorderValid,
        allowRowReorderBetweenGroups = props.allowRowReorderBetweenGroups,
        computedTreeEnabled = props.computedTreeEnabled,
        enableTreeRowReorderParentChange = props.enableTreeRowReorderParentChange,
        nodePathSeparator = props.nodePathSeparator,
        groupPathSeparator = props.groupPathSeparator,
        generateIdFromPath = props.generateIdFromPath;
      var _this$DRAG_INFO7 = _this.DRAG_INFO,
        selectedGroup = _this$DRAG_INFO7.selectedGroup,
        selectedParent = _this$DRAG_INFO7.selectedParent;
      var validDropPositions = (0, _dropIndexValidation.default)({
        data: data,
        count: count,
        dragIndex: dragIndex,
        dropIndex: dropIndex,
        isRowReorderValid: isRowReorderValid,
        selectedGroup: selectedGroup,
        selectedParent: selectedParent,
        nodePathSeparator: nodePathSeparator,
        groupPathSeparator: groupPathSeparator,
        allowRowReorderBetweenGroups: allowRowReorderBetweenGroups,
        computedGroupBy: computedGroupBy,
        computedTreeEnabled: computedTreeEnabled,
        generateIdFromPath: generateIdFromPath,
        enableTreeRowReorderParentChange: enableTreeRowReorderParentChange
      });
      _this.validDropPositions = validDropPositions;
      return validDropPositions;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "clearDropInfo", function () {
      globalObject.clearInterval(_this.gridScrollInterval);
      _this.dragBoxInitialHeight = 0;
      _this.setReorderArrowVisible(false);
      if (!_this.DRAG_INFO) {
        return;
      }
      var dragProxy = _this.DRAG_INFO.dragProxy;
      _this.dropIndex = -1;
      dragProxy.setVisible(false);
      _this.DRAG_INFO = null;
      if (_this.scrollTopRegionRef.current) {
        _this.scrollTopRegionRef.current.setVisible(false);
      }
      if (_this.scrollBottomRegionRef.current) {
        _this.scrollBottomRegionRef.current.setVisible(false);
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "cancelDrop", function () {
      if (_this.DRAG_INFO) {
        _this.DRAG_INFO.dragProxy.setVisible(false);
      }
      _this.setReorderArrowVisible(false);
      _this.DRAG_INFO = null;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "adjustScrollOnDrag", function (props, config) {
      var rowReorderScrollByAmount = props.rowReorderScrollByAmount;
      var _this$DRAG_INFO8 = _this.DRAG_INFO,
        contentRegion = _this$DRAG_INFO8.contentRegion,
        scrollTopMax = _this$DRAG_INFO8.scrollTopMax,
        dragBoxInitialRegion = _this$DRAG_INFO8.dragBoxInitialRegion,
        initialScrollTop = _this$DRAG_INFO8.initialScrollTop;
      var diffTop = config.diff.top;
      var diffLeft = config.diff.left;
      var minScrollTop = Math.max(contentRegion.top, 0);
      var maxScrollTop = contentRegion.bottom;
      var scrollTop = _this.getScrollTop();
      var scrollDiff = scrollTop - initialScrollTop;
      var initialDiffTop = diffTop;
      var initialDiffLeft = diffLeft;
      diffTop += scrollDiff;
      var scrollAdjust = 0;
      var dragProxyAdjust = 0;
      if (dragBoxInitialRegion.top + initialDiffTop < minScrollTop + _this.SCROLL_MARGIN && initialDiffTop < 0) {
        scrollAdjust = -rowReorderScrollByAmount;
      } else if (dragBoxInitialRegion.top + initialDiffTop > maxScrollTop - _this.SCROLL_MARGIN && initialDiffTop > 0) {
        scrollAdjust = rowReorderScrollByAmount;
      }
      if (scrollAdjust) {
        if (scrollTop + scrollAdjust < 0) {
          scrollAdjust = -scrollTop;
        }
        if (scrollTop + scrollAdjust > scrollTopMax) {
          scrollAdjust = scrollTopMax - scrollTop;
        }
        if (scrollAdjust) {
          if (!props.rowReorderAutoScroll) {
            _this.setScrollTop(scrollTop + scrollAdjust);
          }
          dragProxyAdjust = scrollAdjust;
        }
      }
      return {
        initialDiffTop: initialDiffTop,
        initialDiffLeft: initialDiffLeft,
        dragProxyAdjust: dragProxyAdjust,
        scrollDiff: scrollDiff,
        scrollTop: scrollTop,
        diffTop: diffTop,
        diffLeft: diffLeft
      };
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setReorderArrowAt", function (index, ranges, direction, visible) {
      visible = visible !== undefined ? visible : index !== _this.DRAG_INFO.dragIndex;
      if (!_this.scrolling) {
        _this.setReorderArrowVisible(visible);
      }
      var box = ranges[index];
      if (!box) {
        return;
      }
      if (box.group) {
        return;
      }
      var contentRegion = _this.DRAG_INFO.contentRegion;
      var boxPos;
      var dragRowArrowHeight = _this.dragRowArrow.props.rowReorderArrowStyle ? _this.dragRowArrow.props.rowReorderArrowStyle.height : 3;
      if (!Number.isInteger(dragRowArrowHeight)) {
        dragRowArrowHeight = 3;
      }
      var boxSide = box.bottom;
      if (direction < 0) {
        boxSide = box.top;
      } else if (direction > 0) {
        boxSide = box.bottom;
      }
      if (index === 0) {
        boxPos = box.top;
      } else if (index === ranges.length - 1) {
        var lastBox = ranges[ranges.length - 1];
        boxPos = lastBox.bottom - Math.floor(dragRowArrowHeight);
      } else {
        boxPos = boxSide - Math.floor(dragRowArrowHeight / 2);
      }
      var arrowPosition = boxPos - contentRegion.top;
      return _this.setReorderArrowPosition(arrowPosition);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setReorderArrowPosition", function (top) {
      _this.dragRowArrow.setTop(top);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setReorderArrowVisible", function (visible) {
      _this.dragRowArrow.setVisible(visible);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dragStartCallbacks", function (props, dragIndex, selectedGroup) {
      var data = props.data[dragIndex];
      var grouped = props.computedGroupBy && props.computedGroupBy.length > 0;
      if (grouped) {
        props.onGroupRowReorderStart && props.onGroupRowReorderStart({
          data: data,
          dragIndex: dragIndex,
          dragGroup: selectedGroup
        });
      } else {
        props.onRowReorderStart && props.onRowReorderStart({
          data: data,
          dragIndex: dragIndex
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dragEndCallbacks", function (props, dropIndex) {
      if (dropIndex) {
        var data = props.data[dropIndex];
        props.onRowReorderEnd && props.onRowReorderEnd({
          data: data,
          dropIndex: dropIndex
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "dragEndGroupCallbacks", function (props, dropIndex, dropGroup) {
      if (dropIndex !== undefined && props.onGroupRowReorderEnd) {
        var data = props.data[dropIndex];
        props.onGroupRowReorderEnd({
          data: data,
          dropIndex: dropIndex,
          dropGroup: dropGroup
        });
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onRowReorderValidation", function (ev, props, dragIndex) {
      if (ev.isDefaultPrevented && ev.isDefaultPrevented() || ev.defaultPrevented) {
        return false;
      }
      var onRowReorder = props.onRowReorder,
        rowReorderColumn = props.rowReorderColumn,
        computedPagination = props.computedPagination,
        computedSortInfo = props.computedSortInfo,
        computedFiltered = props.computedFiltered,
        dataSource = props.dataSource,
        data = props.data,
        computedPivot = props.computedPivot,
        computedTreeEnabled = props.computedTreeEnabled,
        enableTreeRowReorder = props.enableTreeRowReorder,
        generateIdFromPath = props.generateIdFromPath;
      var isNotRowReorder = false;
      if (!onRowReorder && (typeof onRowReorder !== 'function' || typeof onRowReorder !== 'boolean')) {
        if (!rowReorderColumn) {
          isNotRowReorder = true;
        }
      }
      if (computedTreeEnabled && !enableTreeRowReorder) {
        isNotRowReorder = true;
      }
      if (computedTreeEnabled && !generateIdFromPath) {
        isNotRowReorder = true;
      }
      if (isNotRowReorder) {
        return false;
      }
      if ((ev.nativeEvent ? ev.nativeEvent.which === 3 : ev.which === 3) || ev.metaKey || ev.ctrlKey) {
        return false;
      }
      if (computedPagination || computedSortInfo || computedFiltered || typeof dataSource === 'function' || computedPivot && computedPivot.length > 0) {
        if (typeof onRowReorder !== 'function') {
          return false;
        }
      }
      var dragRow;
      dragRow = data[dragIndex];
      if (!dragRow) {
        ev === null || ev === void 0 ? void 0 : ev.stopPropagation();
        return false;
      }
      return true;
    });
    _this.refDragRow = function (row) {
      _this.dragRow = row;
    };
    _this.refDragRowArrow = function (dragRow) {
      _this.dragRowArrow = dragRow;
    };
    _this.scrollTopRegionRef = (0, _react.createRef)();
    _this.scrollBottomRegionRef = (0, _react.createRef)();
    _this.SCROLL_MARGIN = 40;
    _this.DRAG_ROW_MAX_HEIGHT = 100;
    _this.iterate = true;
    _this.DRAG_INFO = null;
    _this.scrolling = false;
    return _this;
  }
  return (0, _createClass2.default)(InovuaDataGridEnterpriseColumnLayout);
}(_ColumnLayout.default);
exports.default = InovuaDataGridEnterpriseColumnLayout;