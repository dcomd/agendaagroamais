/**
 * Copyright Â© INOVUA TRADING.
 *
 * This source code is licensed under the Commercial License found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useClipboard = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _renderClipboardContextMenu = _interopRequireDefault(require("./renderClipboardContextMenu"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ROW_SEPARATOR = '\n';
var getClipboardSeparator = function getClipboardSeparator(computedProps) {
  var clipboardSeparator = computedProps.clipboardSeparator || '\t';
  if (clipboardSeparator === ROW_SEPARATOR) {
    clipboardSeparator = '\t';
  }
  return clipboardSeparator;
};
var getCopySelectedCells = function getCopySelectedCells(rows) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '\t';
  var data = [];
  Object.keys(rows).map(function (r) {
    var row = rows[r];
    var newRow = [];
    Object.keys(row).map(function (key) {
      var cell = row[key];
      newRow.push(cell);
    });
    var stringRow = newRow.join(separator);
    data.push(stringRow);
  });
  return data.join(ROW_SEPARATOR);
};
var getPasteSelectedCellsDataFromCsv = function getPasteSelectedCellsDataFromCsv(data, computedProps) {
  var clipboardSeparator = getClipboardSeparator(computedProps);
  var _computedProps$comput = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),
    activeRow = _computedProps$comput[0],
    activeColumn = _computedProps$comput[1];
  var rows = data.split(ROW_SEPARATOR);
  var newData = [];
  var dataArray = rows.map(function (r, i) {
    var row = {};
    var cells = r.split(clipboardSeparator);
    cells.map(function (c, j) {
      var column = computedProps.getColumnBy(activeColumn + j);
      if (column) {
        var enableClipboardForEditableCellsOnly = computedProps.enableClipboardForEditableCellsOnly;
        var shouldReplaceValue = enableClipboardForEditableCellsOnly ? column.computedEditable : true;
        var id = column.id;
        var computedColumn = shouldReplaceValue ? (0, _defineProperty2.default)({}, id, c) : undefined;
        row[i] = Object.assign({}, row[i], computedColumn);
      }
    });
    newData.push(row[i]);
    var newIndex = activeRow + i;
    var newId = computedProps.getItemIdAt(newIndex);
    return Object.assign({}, _objectSpread({
      id: newId
    }, row[i]));
  });
  return dataArray;
};
var getPasteSelectedCellsData = function getPasteSelectedCellsData(data, computedProps) {
  var parsedData = JSON.parse(data);
  var _computedProps$comput2 = (0, _slicedToArray2.default)(computedProps.computedActiveCell, 2),
    activeRow = _computedProps$comput2[0],
    activeColumn = _computedProps$comput2[1];
  var dataArray = Object.keys(parsedData).map(function (key, index) {
    var columns = {};
    var row = parsedData[key];
    Object.keys(row).map(function (columnKey, i) {
      var column = computedProps.getColumnBy(activeColumn + i);
      if (column) {
        var enableClipboardForEditableCellsOnly = computedProps.enableClipboardForEditableCellsOnly;
        var shouldReplaceValue = enableClipboardForEditableCellsOnly ? column.computedEditable : true;
        var id = column.id;
        var computedColumn = shouldReplaceValue ? (0, _defineProperty2.default)({}, id, row[columnKey]) : undefined;
        columns[index] = Object.assign({}, columns[index], computedColumn);
      }
    });
    var newIndex = activeRow + index;
    var newId = computedProps.getItemIdAt(newIndex);
    return Object.assign({}, _objectSpread({
      id: newId
    }, columns[index]));
  });
  return dataArray;
};
var useClipboard = function useClipboard(_props, computedProps, computedPropsRef) {
  var clipboard = (0, _react.useRef)(false);
  var preventBlurOnContextMenuOpen = (0, _react.useRef)(false);
  if (!computedProps.enableClipboard) {
    return null;
  }
  var copySelectedRowsToClipboard = function copySelectedRowsToClipboard() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) return null;
    if (computedProps.checkboxColumn || computedProps.computedSelected) {
      var selectedRows = computedProps.computedSelected;
      if (selectedRows) {
        var rows = Object.keys(selectedRows).map(function (row) {
          return selectedRows[row];
        });
        var clonedRows = Object.assign({}, rows);
        if (computedProps.onCopySelectedRowsChange) {
          computedProps.onCopySelectedRowsChange(clonedRows);
        }
        var parsedSelectedRows = JSON.stringify(rows);
        navigator.clipboard.writeText(parsedSelectedRows).then(function () {
          if (Object.keys(clonedRows).length > 0) {
            clipboard.current = true;
          }
        }).catch(function (e) {
          return console.warn(e);
        });
      }
    }
  };
  var pasteSelectedRowsFromClipboard = function pasteSelectedRowsFromClipboard() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return null;
    }
    if (computedProps.checkboxColumn || computedProps.computedSelected) {
      if (navigator.clipboard) {
        navigator.clipboard.readText().then(function (data) {
          var parsedData = JSON.parse(data);
          if (!Array.isArray(parsedData)) return;
          var activeIndex = computedProps.computedActiveIndex;
          var newData = parsedData.map(function (item, index) {
            var newItem = computedProps.getItemAt(activeIndex + index);
            var itemId = computedProps.getItemId(newItem);
            return _objectSpread(_objectSpread({}, item), {}, {
              id: itemId
            });
          }, []);
          if (computedProps.onPasteSelectedRowsChange) {
            computedProps.onPasteSelectedRowsChange(newData);
          }
          if (activeIndex != null) {
            computedProps.setItemsAt(newData, {
              replace: false
            });
          }
        });
      }
    }
  };
  var copyActiveRowToClipboard = function copyActiveRowToClipboard() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return null;
    }
    if (computedProps.computedCellSelection) {
      return null;
    }
    var activeRow = computedProps.getActiveItem();
    if (computedProps.onCopyActiveRowChange) {
      computedProps.onCopyActiveRowChange(activeRow);
    }
    var idProperty = computedProps.idProperty;
    var compoundIdProperty = idProperty.includes(computedProps.idPropertySeparator);
    if (activeRow && navigator.clipboard) {
      var clonedActiveRow = Object.assign({}, activeRow);
      if (compoundIdProperty) {
        var activeRowId = computedProps.getItemId(clonedActiveRow);
        var parts = idProperty.split(computedProps.idPropertySeparator);
        parts.reduce(function (itemObj, id) {
          if (activeRowId === itemObj[id]) {
            if (itemObj) {
              delete itemObj[id];
            }
          }
          return itemObj[id];
        }, clonedActiveRow);
      } else {
        delete clonedActiveRow[idProperty];
      }
      var parsedActiveRow = JSON.stringify(clonedActiveRow);
      navigator.clipboard.writeText(parsedActiveRow).then(function () {
        if (Object.keys(clonedActiveRow).length > 0) {
          clipboard.current = true;
        }
      }).catch(function (e) {
        return console.warn(e);
      });
    }
  };
  var pasteActiveRowFromClipboard = function pasteActiveRowFromClipboard() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return null;
    }
    if (computedProps.computedCellSelection) {
      return null;
    }
    if (navigator.clipboard) {
      navigator.clipboard.readText().then(function (data) {
        var parsedData = JSON.parse(data);
        var activeIndex = computedProps.computedActiveIndex;
        if (computedProps.onPasteActiveRowChange) {
          computedProps.onPasteActiveRowChange(parsedData);
        }
        if (activeIndex != null) {
          computedProps.setItemAt(activeIndex, parsedData, {
            replace: false,
            deepCloning: true
          });
        }
      });
    }
  };
  var copySelectedCellsToClipboard = function copySelectedCellsToClipboard() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return null;
    }
    if (!computedProps.computedCellSelection) {
      return null;
    }
    var selectedCells = computedProps.computedCellSelection;
    var data = computedProps.getData();
    var rows = {};
    Object.keys(selectedCells).map(function (key) {
      var parsedKey = key.split(',');
      var id = parsedKey[0];
      var column = parsedKey[1];
      var index = computedProps.getItemIndexById(id);
      if (index !== undefined && column !== undefined) {
        var cellValue = data[index][column];
        rows[index] = Object.assign({}, rows[index], (0, _defineProperty2.default)({}, column, cellValue));
      }
    });
    if (computedProps.onCopySelectedCellsChange) {
      computedProps.onCopySelectedCellsChange(rows);
    }
    if (!!rows && navigator.clipboard) {
      var parsedSelectedCells = '';
      if (computedProps.copySpreadsheetCompatibleString) {
        var clipboardSeparator = getClipboardSeparator(computedProps);
        parsedSelectedCells = getCopySelectedCells(rows, clipboardSeparator);
      } else {
        parsedSelectedCells = JSON.stringify(rows);
      }
      navigator.clipboard.writeText(parsedSelectedCells).then(function () {
        if (Object.keys(rows).length > 0) {
          clipboard.current = true;
        }
      }).catch(function (e) {
        return console.warn(e);
      });
    }
  };
  var pasteSelectedCellsFromClipboard = function pasteSelectedCellsFromClipboard() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return null;
    }
    if (!computedProps.computedCellSelection) {
      return null;
    }
    if (navigator.clipboard) {
      navigator.clipboard.readText().then(function (data) {
        var dataArray = [];
        if (computedProps.copySpreadsheetCompatibleString) {
          dataArray = getPasteSelectedCellsDataFromCsv(data, computedProps) || [];
        } else {
          dataArray = getPasteSelectedCellsData(data, computedProps) || [];
        }
        if (computedProps.onPasteSelectedCellsChange) {
          computedProps.onPasteSelectedCellsChange(dataArray);
        }
        computedProps.setItemsAt(dataArray, {
          replace: false
        });
      });
    }
  };
  var clipboardContextMenu = function clipboardContextMenu() {
    var computedProps = computedPropsRef.current;
    if (!computedProps) {
      return null;
    }
    if (computedProps.renderRowContextMenu) {
      return;
    }
    computedProps.initialProps.renderRowContextMenu = _renderClipboardContextMenu.default;
  };
  clipboardContextMenu();
  return {
    copyActiveRowToClipboard: copyActiveRowToClipboard,
    pasteActiveRowFromClipboard: pasteActiveRowFromClipboard,
    copySelectedCellsToClipboard: copySelectedCellsToClipboard,
    pasteSelectedCellsFromClipboard: pasteSelectedCellsFromClipboard,
    copySelectedRowsToClipboard: copySelectedRowsToClipboard,
    pasteSelectedRowsFromClipboard: pasteSelectedRowsFromClipboard,
    clipboard: clipboard,
    preventBlurOnContextMenuOpen: preventBlurOnContextMenuOpen
  };
};
exports.useClipboard = useClipboard;